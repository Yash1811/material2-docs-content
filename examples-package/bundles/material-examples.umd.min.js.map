{"version":3,"file":"material-examples.umd.min.js","sources":["../../src/material-examples/example-data.ts","../../src/material-examples/index.ts","../../src/material-examples/table-filtering/table-filtering-example.ts","../../src/material-examples/table-http/table-http-example.ts","../../src/material-examples/table-overview/table-overview-example.ts","../../src/material-examples/table-pagination/table-pagination-example.ts","../../src/material-examples/table-sorting/table-sorting-example.ts","../../src/material-examples/tabs-overview/tabs-overview-example.ts","../../src/material-examples/tabs-template-label/tabs-template-label-example.ts","../../src/material-examples/toolbar-multirow/toolbar-multirow-example.ts","../../src/material-examples/tooltip-overview/tooltip-overview-example.ts","../../src/material-examples/toolbar-overview/toolbar-overview-example.ts","../../src/material-examples/tooltip-position/tooltip-position-example.ts","../../src/material-examples/example-module.ts","../../src/material-examples/input-prefix-suffix/input-prefix-suffix-example.ts","../../src/material-examples/list-overview/list-overview-example.ts","../../src/material-examples/list-sections/list-sections-example.ts","../../src/material-examples/list-selection/list-selection-example.ts","../../src/material-examples/menu-icons/menu-icons-example.ts","../../src/material-examples/menu-overview/menu-overview-example.ts","../../src/material-examples/nested-menu/nested-menu-example.ts","../../src/material-examples/paginator-configurable/paginator-configurable-example.ts","../../src/material-examples/paginator-overview/paginator-overview-example.ts","../../src/material-examples/progress-bar-configurable/progress-bar-configurable-example.ts","../../src/material-examples/progress-bar-overview/progress-bar-overview-example.ts","../../src/material-examples/progress-spinner-configurable/progress-spinner-configurable-example.ts","../../src/material-examples/progress-spinner-overview/progress-spinner-overview-example.ts","../../src/material-examples/radio-ng-model/radio-ng-model-example.ts","../../src/material-examples/radio-overview/radio-overview-example.ts","../../src/material-examples/select-form/select-form-example.ts","../../src/material-examples/select-overview/select-overview-example.ts","../../src/material-examples/sidenav-fab/sidenav-fab-example.ts","../../src/material-examples/sidenav-overview/sidenav-overview-example.ts","../../src/material-examples/slide-toggle-configurable/slide-toggle-configurable-example.ts","../../src/material-examples/slide-toggle-forms/slide-toggle-forms-example.ts","../../src/material-examples/slide-toggle-overview/slide-toggle-overview-example.ts","../../src/material-examples/slider-configurable/slider-configurable-example.ts","../../src/material-examples/slider-overview/slider-overview-example.ts","../../src/material-examples/snack-bar-component/snack-bar-component-example.ts","../../src/material-examples/snack-bar-overview/snack-bar-overview-example.ts","../../src/material-examples/sort-overview/sort-overview-example.ts","../../src/material-examples/stepper-overview/stepper-overview-example.ts","../../src/material-examples/table-basic/table-basic-example.ts","../../node_modules/tslib/tslib.es6.js","../../src/material-examples/material-module.ts","../../src/material-examples/autocomplete-display/autocomplete-display-example.ts","../../src/material-examples/autocomplete-filter/autocomplete-filter-example.ts","../../src/material-examples/autocomplete-overview/autocomplete-overview-example.ts","../../src/material-examples/autocomplete-simple/autocomplete-simple-example.ts","../../src/material-examples/button-overview/button-overview-example.ts","../../src/material-examples/button-toggle-exclusive/button-toggle-exclusive-example.ts","../../src/material-examples/button-toggle-overview/button-toggle-overview-example.ts","../../src/material-examples/button-types/button-types-example.ts","../../src/material-examples/card-fancy/card-fancy-example.ts","../../src/material-examples/card-overview/card-overview-example.ts","../../src/material-examples/cdk-table-basic/cdk-table-basic-example.ts","../../src/material-examples/checkbox-configurable/checkbox-configurable-example.ts","../../src/material-examples/checkbox-overview/checkbox-overview-example.ts","../../src/material-examples/chips-overview/chips-overview-example.ts","../../src/material-examples/chips-stacked/chips-stacked-example.ts","../../src/material-examples/datepicker-api/datepicker-api-example.ts","../../src/material-examples/datepicker-filter/datepicker-filter-example.ts","../../src/material-examples/datepicker-min-max/datepicker-min-max-example.ts","../../src/material-examples/datepicker-overview/datepicker-overview-example.ts","../../src/material-examples/datepicker-start-view/datepicker-start-view-example.ts","../../src/material-examples/datepicker-touch/datepicker-touch-example.ts","../../src/material-examples/dialog-content/dialog-content-example.ts","../../src/material-examples/dialog-data/dialog-data-example.ts","../../src/material-examples/dialog-elements/dialog-elements-example.ts","../../src/material-examples/dialog-overview/dialog-overview-example.ts","../../src/material-examples/expansion-overview/expansion-overview-example.ts","../../src/material-examples/expansion-steps/expansion-steps-example.ts","../../src/material-examples/grid-list-dynamic/grid-list-dynamic-example.ts","../../src/material-examples/grid-list-overview/grid-list-overview-example.ts","../../src/material-examples/icon-overview/icon-overview-example.ts","../../src/material-examples/icon-svg-example/icon-svg-example.ts","../../src/material-examples/input-clearable/input-clearable-example.ts","../../src/material-examples/input-errors/input-errors-example.ts","../../src/material-examples/input-form/input-form-example.ts","../../src/material-examples/input-hint/input-hint-example.ts","../../src/material-examples/input-overview/input-overview-example.ts"],"sourcesContent":["import {EXAMPLE_COMPONENTS} from './example-module';\n/**\n * Example data\n *   with information about Component name, selector, files used in example, and path to examples\n */\nexport class ExampleData {\n  // TODO: figure out how do we get these variables.\n  description = 'Some description for material';\n  // TODO: use real example and delete the example/ folder.\n  examplePath = '/assets/example/';\n  exampleFiles = ['button-demo.html', 'button-demo.scss', 'button-demo.ts'];\n\n  // TODO: extract these variables from example code.\n  selectorName = 'button-demo';\n  indexFilename = 'button-demo';\n  componentName = 'ButtonDemo';\n/**\n * @param {?} example\n */\nconstructor(example: string) {\n    if (example && EXAMPLE_COMPONENTS[example]) {\n      this.examplePath = `/assets/plunker/examples/${example}/`;\n      // TODO(tinayuangao): Do not hard-code extensions\n      this.exampleFiles = ['html', 'ts', 'css']\n        .map((extension) => `${example}-example.${extension}`);\n      if (EXAMPLE_COMPONENTS[example].additionalFiles) {\n        this.exampleFiles = this.exampleFiles.concat(EXAMPLE_COMPONENTS[example].additionalFiles);\n      }\n      this.selectorName = this.indexFilename = `${example}-example`;\n\n      let exampleName = example.replace(/(?:^\\w|\\b\\w)/g, letter => letter.toUpperCase());\n\n      if (EXAMPLE_COMPONENTS[example].title) {\n        this.description = EXAMPLE_COMPONENTS[example].title;\n      } else {\n        this.description = exampleName.replace(/[\\-]+/g, ' ') + ' Example';\n      }\n\n      if (EXAMPLE_COMPONENTS[example].selectorName) {\n        this.componentName = EXAMPLE_COMPONENTS[example].selectorName;\n      } else {\n        this.componentName = exampleName.replace(/[\\-]+/g, '') + 'Example';\n      }\n    }\n  }\n}\n\nfunction ExampleData_tsickle_Closure_declarations() {\n/** @type {?} */\nExampleData.prototype.description;\n/** @type {?} */\nExampleData.prototype.examplePath;\n/** @type {?} */\nExampleData.prototype.exampleFiles;\n/** @type {?} */\nExampleData.prototype.selectorName;\n/** @type {?} */\nExampleData.prototype.indexFilename;\n/** @type {?} */\nExampleData.prototype.componentName;\n}\n\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {ExampleData,LiveExample,EXAMPLE_COMPONENTS,EXAMPLE_LIST,ExampleModule,ListOverviewExample,DatepickerOverviewExample,CardFancyExample,ToolbarMultirowExample,ButtonToggleOverviewExample,ExpansionOverviewExample,StepperOverviewExample} from './public_api';\n\nexport {AutocompleteDisplayExample as ɵa} from './autocomplete-display/autocomplete-display-example';\nexport {AutocompleteFilterExample as ɵb} from './autocomplete-filter/autocomplete-filter-example';\nexport {AutocompleteOverviewExample as ɵc} from './autocomplete-overview/autocomplete-overview-example';\nexport {AutocompleteSimpleExample as ɵd} from './autocomplete-simple/autocomplete-simple-example';\nexport {ButtonOverviewExample as ɵe} from './button-overview/button-overview-example';\nexport {ButtonToggleExclusiveExample as ɵf} from './button-toggle-exclusive/button-toggle-exclusive-example';\nexport {ButtonTypesExample as ɵg} from './button-types/button-types-example';\nexport {CardOverviewExample as ɵh} from './card-overview/card-overview-example';\nexport {CdkTableBasicExample as ɵi} from './cdk-table-basic/cdk-table-basic-example';\nexport {CheckboxConfigurableExample as ɵj} from './checkbox-configurable/checkbox-configurable-example';\nexport {CheckboxOverviewExample as ɵk} from './checkbox-overview/checkbox-overview-example';\nexport {ChipsOverviewExample as ɵl} from './chips-overview/chips-overview-example';\nexport {ChipsStackedExample as ɵm} from './chips-stacked/chips-stacked-example';\nexport {DatepickerApiExample as ɵn} from './datepicker-api/datepicker-api-example';\nexport {DatepickerFilterExample as ɵo} from './datepicker-filter/datepicker-filter-example';\nexport {DatepickerMinMaxExample as ɵp} from './datepicker-min-max/datepicker-min-max-example';\nexport {DatepickerStartViewExample as ɵq} from './datepicker-start-view/datepicker-start-view-example';\nexport {DatepickerTouchExample as ɵr} from './datepicker-touch/datepicker-touch-example';\nexport {DialogContentExample as ɵs,DialogContentExampleDialog as ɵt} from './dialog-content/dialog-content-example';\nexport {DialogDataExample as ɵu,DialogDataExampleDialog as ɵv} from './dialog-data/dialog-data-example';\nexport {DialogElementsExample as ɵw,DialogElementsExampleDialog as ɵx} from './dialog-elements/dialog-elements-example';\nexport {DialogOverviewExample as ɵy,DialogOverviewExampleDialog as ɵz} from './dialog-overview/dialog-overview-example';\nexport {ExpansionStepsExample as ɵba} from './expansion-steps/expansion-steps-example';\nexport {GridListDynamicExample as ɵbb} from './grid-list-dynamic/grid-list-dynamic-example';\nexport {GridListOverviewExample as ɵbc} from './grid-list-overview/grid-list-overview-example';\nexport {IconOverviewExample as ɵbd} from './icon-overview/icon-overview-example';\nexport {IconSvgExample as ɵbe} from './icon-svg-example/icon-svg-example';\nexport {InputClearableExample as ɵbf} from './input-clearable/input-clearable-example';\nexport {InputErrorsExample as ɵbg} from './input-errors/input-errors-example';\nexport {InputFormExample as ɵbh} from './input-form/input-form-example';\nexport {InputHintExample as ɵbi} from './input-hint/input-hint-example';\nexport {InputOverviewExample as ɵbj} from './input-overview/input-overview-example';\nexport {InputPrefixSuffixExample as ɵbk} from './input-prefix-suffix/input-prefix-suffix-example';\nexport {ListSectionsExample as ɵbl} from './list-sections/list-sections-example';\nexport {ListSelectionExample as ɵbm} from './list-selection/list-selection-example';\nexport {ExampleMaterialModule as ɵcw} from './material-module';\nexport {MenuIconsExample as ɵbn} from './menu-icons/menu-icons-example';\nexport {MenuOverviewExample as ɵbo} from './menu-overview/menu-overview-example';\nexport {NestedMenuExample as ɵbp} from './nested-menu/nested-menu-example';\nexport {PaginatorConfigurableExample as ɵbq} from './paginator-configurable/paginator-configurable-example';\nexport {PaginatorOverviewExample as ɵbr} from './paginator-overview/paginator-overview-example';\nexport {ProgressBarConfigurableExample as ɵbs} from './progress-bar-configurable/progress-bar-configurable-example';\nexport {ProgressBarOverviewExample as ɵbt} from './progress-bar-overview/progress-bar-overview-example';\nexport {ProgressSpinnerConfigurableExample as ɵbu} from './progress-spinner-configurable/progress-spinner-configurable-example';\nexport {ProgressSpinnerOverviewExample as ɵbv} from './progress-spinner-overview/progress-spinner-overview-example';\nexport {RadioNgModelExample as ɵbw} from './radio-ng-model/radio-ng-model-example';\nexport {RadioOverviewExample as ɵbx} from './radio-overview/radio-overview-example';\nexport {SelectFormExample as ɵby} from './select-form/select-form-example';\nexport {SelectOverviewExample as ɵbz} from './select-overview/select-overview-example';\nexport {SidenavFabExample as ɵca} from './sidenav-fab/sidenav-fab-example';\nexport {SidenavOverviewExample as ɵcb} from './sidenav-overview/sidenav-overview-example';\nexport {SlideToggleConfigurableExample as ɵcc} from './slide-toggle-configurable/slide-toggle-configurable-example';\nexport {SlideToggleFormsExample as ɵcd} from './slide-toggle-forms/slide-toggle-forms-example';\nexport {SlideToggleOverviewExample as ɵce} from './slide-toggle-overview/slide-toggle-overview-example';\nexport {SliderConfigurableExample as ɵcf} from './slider-configurable/slider-configurable-example';\nexport {SliderOverviewExample as ɵcg} from './slider-overview/slider-overview-example';\nexport {PizzaPartyComponent as ɵci,SnackBarComponentExample as ɵch} from './snack-bar-component/snack-bar-component-example';\nexport {SnackBarOverviewExample as ɵcj} from './snack-bar-overview/snack-bar-overview-example';\nexport {SortOverviewExample as ɵck} from './sort-overview/sort-overview-example';\nexport {TableBasicExample as ɵcl} from './table-basic/table-basic-example';\nexport {TableFilteringExample as ɵcm} from './table-filtering/table-filtering-example';\nexport {TableHttpExample as ɵcn} from './table-http/table-http-example';\nexport {TableOverviewExample as ɵco} from './table-overview/table-overview-example';\nexport {TablePaginationExample as ɵcp} from './table-pagination/table-pagination-example';\nexport {TableSortingExample as ɵcq} from './table-sorting/table-sorting-example';\nexport {TabsOverviewExample as ɵcr} from './tabs-overview/tabs-overview-example';\nexport {TabsTemplateLabelExample as ɵcs} from './tabs-template-label/tabs-template-label-example';\nexport {ToolbarOverviewExample as ɵct} from './toolbar-overview/toolbar-overview-example';\nexport {TooltipOverviewExample as ɵcu} from './tooltip-overview/tooltip-overview-example';\nexport {TooltipPositionExample as ɵcv} from './tooltip-position/tooltip-position-example';","import {Component, ElementRef, ViewChild} from '@angular/core';\nimport {DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {Observable} from 'rxjs/Observable';\nimport'rxjs/add/operator/startWith';\nimport'rxjs/add/observable/merge';\nimport'rxjs/add/operator/map';\nimport'rxjs/add/operator/debounceTime';\nimport'rxjs/add/operator/distinctUntilChanged';\nimport'rxjs/add/observable/fromEvent';\n/**\n * \\@title Table with filtering\n */\nexport class TableFilteringExample {\n  displayedColumns = ['userId', 'userName', 'progress', 'color'];\n  exampleDatabase = new ExampleDatabase();\n  dataSource: ExampleDataSource | null;\n\n   filter: ElementRef;\n/**\n * @return {?}\n */\nngOnInit() {\n    this.dataSource = new ExampleDataSource(this.exampleDatabase);\n    Observable.fromEvent(this.filter.nativeElement, 'keyup')\n        .debounceTime(150)\n        .distinctUntilChanged()\n        .subscribe(() => {\n          if (!this.dataSource) { return; }\n          this.dataSource.filter = this.filter.nativeElement.value;\n        });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'table-filtering-example',\n  styleUrls: ['table-filtering-example.css'],\n  templateUrl: 'table-filtering-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'filter': [{ type: ViewChild, args: ['filter', ] },],\n};\n}\n\nfunction TableFilteringExample_tsickle_Closure_declarations() {\n/** @type {?} */\nTableFilteringExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTableFilteringExample.ctorParameters;\n/** @type {?} */\nTableFilteringExample.propDecorators;\n/** @type {?} */\nTableFilteringExample.prototype.displayedColumns;\n/** @type {?} */\nTableFilteringExample.prototype.exampleDatabase;\n/** @type {?} */\nTableFilteringExample.prototype.dataSource;\n/** @type {?} */\nTableFilteringExample.prototype.filter;\n}\n\n/**\n * Constants used to fill up our data base.\n */\nconst COLORS = ['maroon', 'red', 'orange', 'yellow', 'olive', 'green', 'purple',\n  'fuchsia', 'lime', 'teal', 'aqua', 'blue', 'navy', 'black', 'gray'];\nconst /** @type {?} */ NAMES = ['Maia', 'Asher', 'Olivia', 'Atticus', 'Amelia', 'Jack',\n  'Charlotte', 'Theodore', 'Isla', 'Oliver', 'Isabella', 'Jasper',\n  'Cora', 'Levi', 'Violet', 'Arthur', 'Mia', 'Thomas', 'Elizabeth'];\n\nexport interface UserData {\n  id: string;\n  name: string;\n  progress: string;\n  color: string;\n}\n/**\n * An example database that the data source uses to retrieve data for the table.\n */\nexport class ExampleDatabase {\n/**\n * Stream that emits whenever the data has been modified.\n */\ndataChange: BehaviorSubject<UserData[]> = new BehaviorSubject<UserData[]>([]);\n/**\n * @return {?}\n */\nget data(): UserData[] { return this.dataChange.value; }\nconstructor() {\n    // Fill up the database with 100 users.\n    for (let i = 0; i < 100; i++) { this.addUser(); }\n  }\n/**\n * Adds a new user to the database.\n * @return {?}\n */\naddUser() {\n    const /** @type {?} */ copiedData = this.data.slice();\n    copiedData.push(this.createNewUser());\n    this.dataChange.next(copiedData);\n  }\n/**\n * Builds and returns a new User.\n * @return {?}\n */\nprivate createNewUser() {\n    const /** @type {?} */ name =\n        NAMES[Math.round(Math.random() * (NAMES.length - 1))] + ' ' +\n        NAMES[Math.round(Math.random() * (NAMES.length - 1))].charAt(0) + '.';\n\n    return {\n      id: (this.data.length + 1).toString(),\n      name: name,\n      progress: Math.round(Math.random() * 100).toString(),\n      color: COLORS[Math.round(Math.random() * (COLORS.length - 1))]\n    };\n  }\n}\n\nfunction ExampleDatabase_tsickle_Closure_declarations() {\n/**\n * Stream that emits whenever the data has been modified.\n * @type {?}\n */\nExampleDatabase.prototype.dataChange;\n}\n\n/**\n * Data source to provide what data should be rendered in the table. Note that the data source\n * can retrieve its data in any way. In this case, the data source is provided a reference\n * to a common data base, ExampleDatabase. It is not the data source's responsibility to manage\n * the underlying data. Instead, it only needs to take the data and send the table exactly what\n * should be rendered.\n */\nexport class ExampleDataSource extends DataSource<any> {\n  _filterChange = new BehaviorSubject('');\n/**\n * @return {?}\n */\nget filter(): string { return this._filterChange.value; }\n/**\n * @param {?} filter\n * @return {?}\n */\nset filter(filter: string) { this._filterChange.next(filter); }\n/**\n * @param {?} _exampleDatabase\n */\nconstructor(private _exampleDatabase: ExampleDatabase) {\n    super();\n  }\n/**\n * Connect function called by the table to retrieve one stream containing the data to render.\n * @return {?}\n */\nconnect(): Observable<UserData[]> {\n    const /** @type {?} */ displayDataChanges = [\n      this._exampleDatabase.dataChange,\n      this._filterChange,\n    ];\n\n    return Observable.merge(...displayDataChanges).map(() => {\n      return this._exampleDatabase.data.slice().filter((item: UserData) => {\n        let /** @type {?} */ searchStr = (item.name + item.color).toLowerCase();\n        return searchStr.indexOf(this.filter.toLowerCase()) != -1;\n      });\n    });\n  }\n/**\n * @return {?}\n */\ndisconnect() {}\n}\n\nfunction ExampleDataSource_tsickle_Closure_declarations() {\n/** @type {?} */\nExampleDataSource.prototype._filterChange;\n/** @type {?} */\nExampleDataSource.prototype._exampleDatabase;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component, OnInit, ViewChild} from '@angular/core';\nimport {Http} from '@angular/http';\nimport {DataSource} from '@angular/cdk/collections';\nimport {MdPaginator, MdSort} from '@angular/material';\nimport {Observable} from 'rxjs/Observable';\nimport'rxjs/add/observable/merge';\nimport'rxjs/add/observable/of';\nimport'rxjs/add/operator/catch';\nimport'rxjs/add/operator/map';\nimport'rxjs/add/operator/startWith';\nimport'rxjs/add/operator/switchMap';\n/**\n * \\@title Table retrieving data through HTTP\n */\nexport class TableHttpExample implements OnInit {\n  displayedColumns = ['created_at', 'state', 'number', 'title'];\n  exampleDatabase: ExampleHttpDao | null;\n  dataSource: ExampleDataSource | null;\n\n   paginator: MdPaginator;\n   sort: MdSort;\n/**\n * @param {?} http\n */\nconstructor(private http: Http) {}\n/**\n * @return {?}\n */\nngOnInit() {\n    this.exampleDatabase = new ExampleHttpDao(this.http);\n    this.dataSource = new ExampleDataSource( /** @type {?} */((\n      this.exampleDatabase)), this.paginator, this.sort);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'table-http-example',\n  styleUrls: ['table-http-example.css'],\n  templateUrl: 'table-http-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'paginator': [{ type: ViewChild, args: [MdPaginator, ] },],\n'sort': [{ type: ViewChild, args: [MdSort, ] },],\n};\n}\n\nfunction TableHttpExample_tsickle_Closure_declarations() {\n/** @type {?} */\nTableHttpExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTableHttpExample.ctorParameters;\n/** @type {?} */\nTableHttpExample.propDecorators;\n/** @type {?} */\nTableHttpExample.prototype.displayedColumns;\n/** @type {?} */\nTableHttpExample.prototype.exampleDatabase;\n/** @type {?} */\nTableHttpExample.prototype.dataSource;\n/** @type {?} */\nTableHttpExample.prototype.paginator;\n/** @type {?} */\nTableHttpExample.prototype.sort;\n/** @type {?} */\nTableHttpExample.prototype.http;\n}\n\n\nexport interface GithubApi {\n  items: GithubIssue[];\n  total_count: number;\n}\n\nexport interface GithubIssue {\n  created_at: string;\n  number: string;\n  state: string;\n  title: string;\n}\n/**\n * An example database that the data source uses to retrieve data for the table.\n */\nexport class ExampleHttpDao {\n/**\n * @param {?} http\n */\nconstructor(private http: Http) {}\n/**\n * @param {?} sort\n * @param {?} order\n * @param {?} page\n * @return {?}\n */\ngetRepoIssues(sort: string, order: string, page: number): Observable<GithubApi> {\n    const /** @type {?} */ href = 'https://api.github.com/search/issues';\n    const /** @type {?} */ requestUrl =\n      `${href}?q=repo:angular/material2&sort=${sort}&order=${order}&page=${page + 1}`;\n\n    return this.http.get(requestUrl)\n                    .map(response => /** @type {?} */(( response.json() as GithubApi)));\n  }\n}\n\nfunction ExampleHttpDao_tsickle_Closure_declarations() {\n/** @type {?} */\nExampleHttpDao.prototype.http;\n}\n\n/**\n * Data source to provide what data should be rendered in the table. Note that the data source\n * can retrieve its data in any way. In this case, the data source is provided a reference\n * to a common data base, ExampleHttpDao. It is not the data source's responsibility to manage\n * the underlying data. Instead, it only needs to take the data and send the table exactly what\n * should be rendered.\n */\nexport class ExampleDataSource extends DataSource<GithubIssue> {\n  // The number of issues returned by github matching the query.\n  resultsLength = 0;\n  isLoadingResults = false;\n  isRateLimitReached = false;\n/**\n * @param {?} exampleDatabase\n * @param {?} paginator\n * @param {?} sort\n */\nconstructor(private exampleDatabase: ExampleHttpDao,\nprivate paginator: MdPaginator,\nprivate sort: MdSort) {\n    super();\n  }\n/**\n * Connect function called by the table to retrieve one stream containing the data to render.\n * @return {?}\n */\nconnect(): Observable<GithubIssue[]> {\n    const /** @type {?} */ displayDataChanges = [\n      this.sort.mdSortChange,\n      this.paginator.page\n    ];\n\n    // If the user changes the sort order, reset back to the first page.\n    this.sort.mdSortChange.subscribe(() => this.paginator.pageIndex = 0);\n\n    return Observable.merge(...displayDataChanges)\n      .startWith(null)\n      .switchMap(() => {\n        this.isLoadingResults = true;\n        return this.exampleDatabase.getRepoIssues(\n          this.sort.active, this.sort.direction, this.paginator.pageIndex);\n      })\n      .map(data => {\n        // Flip flag to show that loading has finished.\n        this.isLoadingResults = false;\n        this.isRateLimitReached = false;\n        this.resultsLength = data.total_count;\n\n        return data.items;\n      })\n      .catch(() => {\n        this.isLoadingResults = false;\n        // Catch if the GitHub API has reached its rate limit. Return empty data.\n        this.isRateLimitReached = true;\n        return Observable.of([]);\n      });\n  }\n/**\n * @return {?}\n */\ndisconnect() {}\n}\n\nfunction ExampleDataSource_tsickle_Closure_declarations() {\n/** @type {?} */\nExampleDataSource.prototype.resultsLength;\n/** @type {?} */\nExampleDataSource.prototype.isLoadingResults;\n/** @type {?} */\nExampleDataSource.prototype.isRateLimitReached;\n/** @type {?} */\nExampleDataSource.prototype.exampleDatabase;\n/** @type {?} */\nExampleDataSource.prototype.paginator;\n/** @type {?} */\nExampleDataSource.prototype.sort;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component, ElementRef, ViewChild} from '@angular/core';\nimport {DataSource} from '@angular/cdk/collections';\nimport {MdPaginator, MdSort} from '@angular/material';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {Observable} from 'rxjs/Observable';\nimport'rxjs/add/operator/startWith';\nimport'rxjs/add/observable/merge';\nimport'rxjs/add/observable/fromEvent';\nimport'rxjs/add/operator/map';\nimport'rxjs/add/operator/distinctUntilChanged';\nimport'rxjs/add/operator/debounceTime';\n/**\n * \\@title Feature-rich data table\n */\nexport class TableOverviewExample {\n  displayedColumns = ['select', 'userId', 'userName', 'progress', 'color'];\n  exampleDatabase = new ExampleDatabase();\n  selection = new SelectionModel<string>(true, []);\n  dataSource: ExampleDataSource | null;\n\n   paginator: MdPaginator;\n   sort: MdSort;\n   filter: ElementRef;\n/**\n * @return {?}\n */\nngOnInit() {\n    this.dataSource = new ExampleDataSource(this.exampleDatabase, this.paginator, this.sort);\n    Observable.fromEvent(this.filter.nativeElement, 'keyup')\n        .debounceTime(150)\n        .distinctUntilChanged()\n        .subscribe(() => {\n          if (!this.dataSource) { return; }\n          this.dataSource.filter = this.filter.nativeElement.value;\n        });\n  }\n/**\n * @return {?}\n */\nisAllSelected(): boolean {\n    if (!this.dataSource) { return false; }\n    if (this.selection.isEmpty()) { return false; }\n\n    if (this.filter.nativeElement.value) {\n      return this.selection.selected.length == this.dataSource.renderedData.length;\n    } else {\n      return this.selection.selected.length == this.exampleDatabase.data.length;\n    }\n  }\n/**\n * @return {?}\n */\nmasterToggle() {\n    if (!this.dataSource) { return; }\n\n    if (this.isAllSelected()) {\n      this.selection.clear();\n    } else if (this.filter.nativeElement.value) {\n      this.dataSource.renderedData.forEach(data => this.selection.select(data.id));\n    } else {\n      this.exampleDatabase.data.forEach(data => this.selection.select(data.id));\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'table-overview-example',\n  styleUrls: ['table-overview-example.css'],\n  templateUrl: 'table-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'paginator': [{ type: ViewChild, args: [MdPaginator, ] },],\n'sort': [{ type: ViewChild, args: [MdSort, ] },],\n'filter': [{ type: ViewChild, args: ['filter', ] },],\n};\n}\n\nfunction TableOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nTableOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTableOverviewExample.ctorParameters;\n/** @type {?} */\nTableOverviewExample.propDecorators;\n/** @type {?} */\nTableOverviewExample.prototype.displayedColumns;\n/** @type {?} */\nTableOverviewExample.prototype.exampleDatabase;\n/** @type {?} */\nTableOverviewExample.prototype.selection;\n/** @type {?} */\nTableOverviewExample.prototype.dataSource;\n/** @type {?} */\nTableOverviewExample.prototype.paginator;\n/** @type {?} */\nTableOverviewExample.prototype.sort;\n/** @type {?} */\nTableOverviewExample.prototype.filter;\n}\n\n/**\n * Constants used to fill up our data base.\n */\nconst COLORS = ['maroon', 'red', 'orange', 'yellow', 'olive', 'green', 'purple',\n  'fuchsia', 'lime', 'teal', 'aqua', 'blue', 'navy', 'black', 'gray'];\nconst /** @type {?} */ NAMES = ['Maia', 'Asher', 'Olivia', 'Atticus', 'Amelia', 'Jack',\n  'Charlotte', 'Theodore', 'Isla', 'Oliver', 'Isabella', 'Jasper',\n  'Cora', 'Levi', 'Violet', 'Arthur', 'Mia', 'Thomas', 'Elizabeth'];\n\nexport interface UserData {\n  id: string;\n  name: string;\n  progress: string;\n  color: string;\n}\n/**\n * An example database that the data source uses to retrieve data for the table.\n */\nexport class ExampleDatabase {\n/**\n * Stream that emits whenever the data has been modified.\n */\ndataChange: BehaviorSubject<UserData[]> = new BehaviorSubject<UserData[]>([]);\n/**\n * @return {?}\n */\nget data(): UserData[] { return this.dataChange.value; }\nconstructor() {\n    // Fill up the database with 100 users.\n    for (let i = 0; i < 100; i++) { this.addUser(); }\n  }\n/**\n * Adds a new user to the database.\n * @return {?}\n */\naddUser() {\n    const /** @type {?} */ copiedData = this.data.slice();\n    copiedData.push(this.createNewUser());\n    this.dataChange.next(copiedData);\n  }\n/**\n * Builds and returns a new User.\n * @return {?}\n */\nprivate createNewUser() {\n    const /** @type {?} */ name =\n        NAMES[Math.round(Math.random() * (NAMES.length - 1))] + ' ' +\n        NAMES[Math.round(Math.random() * (NAMES.length - 1))].charAt(0) + '.';\n\n    return {\n      id: (this.data.length + 1).toString(),\n      name: name,\n      progress: Math.round(Math.random() * 100).toString(),\n      color: COLORS[Math.round(Math.random() * (COLORS.length - 1))]\n    };\n  }\n}\n\nfunction ExampleDatabase_tsickle_Closure_declarations() {\n/**\n * Stream that emits whenever the data has been modified.\n * @type {?}\n */\nExampleDatabase.prototype.dataChange;\n}\n\n/**\n * Data source to provide what data should be rendered in the table. Note that the data source\n * can retrieve its data in any way. In this case, the data source is provided a reference\n * to a common data base, ExampleDatabase. It is not the data source's responsibility to manage\n * the underlying data. Instead, it only needs to take the data and send the table exactly what\n * should be rendered.\n */\nexport class ExampleDataSource extends DataSource<any> {\n  _filterChange = new BehaviorSubject('');\n/**\n * @return {?}\n */\nget filter(): string { return this._filterChange.value; }\n/**\n * @param {?} filter\n * @return {?}\n */\nset filter(filter: string) { this._filterChange.next(filter); }\n\n  filteredData: UserData[] = [];\n  renderedData: UserData[] = [];\n/**\n * @param {?} _exampleDatabase\n * @param {?} _paginator\n * @param {?} _sort\n */\nconstructor(private _exampleDatabase: ExampleDatabase,\nprivate _paginator: MdPaginator,\nprivate _sort: MdSort) {\n    super();\n\n    // Reset to the first page when the user changes the filter.\n    this._filterChange.subscribe(() => this._paginator.pageIndex = 0);\n  }\n/**\n * Connect function called by the table to retrieve one stream containing the data to render.\n * @return {?}\n */\nconnect(): Observable<UserData[]> {\n    // Listen for any changes in the base data, sorting, filtering, or pagination\n    const /** @type {?} */ displayDataChanges = [\n      this._exampleDatabase.dataChange,\n      this._sort.mdSortChange,\n      this._filterChange,\n      this._paginator.page,\n    ];\n\n    return Observable.merge(...displayDataChanges).map(() => {\n      // Filter data\n      this.filteredData = this._exampleDatabase.data.slice().filter((item: UserData) => {\n        let /** @type {?} */ searchStr = (item.name + item.color).toLowerCase();\n        return searchStr.indexOf(this.filter.toLowerCase()) != -1;\n      });\n\n      // Sort filtered data\n      const /** @type {?} */ sortedData = this.sortData(this.filteredData.slice());\n\n      // Grab the page's slice of the filtered sorted data.\n      const /** @type {?} */ startIndex = this._paginator.pageIndex * this._paginator.pageSize;\n      this.renderedData = sortedData.splice(startIndex, this._paginator.pageSize);\n      return this.renderedData;\n    });\n  }\n/**\n * @return {?}\n */\ndisconnect() {}\n/**\n * Returns a sorted copy of the database data.\n * @param {?} data\n * @return {?}\n */\nsortData(data: UserData[]): UserData[] {\n    if (!this._sort.active || this._sort.direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let /** @type {?} */ propertyA: number|string = '';\n      let /** @type {?} */ propertyB: number|string = '';\n\n      switch (this._sort.active) {\n        case 'userId': [propertyA, propertyB] = [a.id, b.id]; break;\n        case 'userName': [propertyA, propertyB] = [a.name, b.name]; break;\n        case 'progress': [propertyA, propertyB] = [a.progress, b.progress]; break;\n        case 'color': [propertyA, propertyB] = [a.color, b.color]; break;\n      }\n\n      let /** @type {?} */ valueA = isNaN(+propertyA) ? propertyA : +propertyA;\n      let /** @type {?} */ valueB = isNaN(+propertyB) ? propertyB : +propertyB;\n\n      return (valueA < valueB ? -1 : 1) * (this._sort.direction == 'asc' ? 1 : -1);\n    });\n  }\n}\n\nfunction ExampleDataSource_tsickle_Closure_declarations() {\n/** @type {?} */\nExampleDataSource.prototype._filterChange;\n/** @type {?} */\nExampleDataSource.prototype.filteredData;\n/** @type {?} */\nExampleDataSource.prototype.renderedData;\n/** @type {?} */\nExampleDataSource.prototype._exampleDatabase;\n/** @type {?} */\nExampleDataSource.prototype._paginator;\n/** @type {?} */\nExampleDataSource.prototype._sort;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component, ViewChild} from '@angular/core';\nimport {DataSource} from '@angular/cdk/collections';\nimport {MdPaginator} from '@angular/material';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {Observable} from 'rxjs/Observable';\nimport'rxjs/add/operator/startWith';\nimport'rxjs/add/observable/merge';\nimport'rxjs/add/operator/map';\n/**\n * \\@title Table with pagination\n */\nexport class TablePaginationExample {\n  displayedColumns = ['userId', 'userName', 'progress', 'color'];\n  exampleDatabase = new ExampleDatabase();\n  dataSource: ExampleDataSource | null;\n\n   paginator: MdPaginator;\n/**\n * @return {?}\n */\nngOnInit() {\n    this.dataSource = new ExampleDataSource(this.exampleDatabase, this.paginator);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'table-pagination-example',\n  styleUrls: ['table-pagination-example.css'],\n  templateUrl: 'table-pagination-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'paginator': [{ type: ViewChild, args: [MdPaginator, ] },],\n};\n}\n\nfunction TablePaginationExample_tsickle_Closure_declarations() {\n/** @type {?} */\nTablePaginationExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTablePaginationExample.ctorParameters;\n/** @type {?} */\nTablePaginationExample.propDecorators;\n/** @type {?} */\nTablePaginationExample.prototype.displayedColumns;\n/** @type {?} */\nTablePaginationExample.prototype.exampleDatabase;\n/** @type {?} */\nTablePaginationExample.prototype.dataSource;\n/** @type {?} */\nTablePaginationExample.prototype.paginator;\n}\n\n/**\n * Constants used to fill up our data base.\n */\nconst COLORS = ['maroon', 'red', 'orange', 'yellow', 'olive', 'green', 'purple',\n  'fuchsia', 'lime', 'teal', 'aqua', 'blue', 'navy', 'black', 'gray'];\nconst /** @type {?} */ NAMES = ['Maia', 'Asher', 'Olivia', 'Atticus', 'Amelia', 'Jack',\n  'Charlotte', 'Theodore', 'Isla', 'Oliver', 'Isabella', 'Jasper',\n  'Cora', 'Levi', 'Violet', 'Arthur', 'Mia', 'Thomas', 'Elizabeth'];\n\nexport interface UserData {\n  id: string;\n  name: string;\n  progress: string;\n  color: string;\n}\n/**\n * An example database that the data source uses to retrieve data for the table.\n */\nexport class ExampleDatabase {\n/**\n * Stream that emits whenever the data has been modified.\n */\ndataChange: BehaviorSubject<UserData[]> = new BehaviorSubject<UserData[]>([]);\n/**\n * @return {?}\n */\nget data(): UserData[] { return this.dataChange.value; }\nconstructor() {\n    // Fill up the database with 100 users.\n    for (let i = 0; i < 100; i++) { this.addUser(); }\n  }\n/**\n * Adds a new user to the database.\n * @return {?}\n */\naddUser() {\n    const /** @type {?} */ copiedData = this.data.slice();\n    copiedData.push(this.createNewUser());\n    this.dataChange.next(copiedData);\n  }\n/**\n * Builds and returns a new User.\n * @return {?}\n */\nprivate createNewUser() {\n    const /** @type {?} */ name =\n        NAMES[Math.round(Math.random() * (NAMES.length - 1))] + ' ' +\n        NAMES[Math.round(Math.random() * (NAMES.length - 1))].charAt(0) + '.';\n\n    return {\n      id: (this.data.length + 1).toString(),\n      name: name,\n      progress: Math.round(Math.random() * 100).toString(),\n      color: COLORS[Math.round(Math.random() * (COLORS.length - 1))]\n    };\n  }\n}\n\nfunction ExampleDatabase_tsickle_Closure_declarations() {\n/**\n * Stream that emits whenever the data has been modified.\n * @type {?}\n */\nExampleDatabase.prototype.dataChange;\n}\n\n/**\n * Data source to provide what data should be rendered in the table. Note that the data source\n * can retrieve its data in any way. In this case, the data source is provided a reference\n * to a common data base, ExampleDatabase. It is not the data source's responsibility to manage\n * the underlying data. Instead, it only needs to take the data and send the table exactly what\n * should be rendered.\n */\nexport class ExampleDataSource extends DataSource<any> {\n/**\n * @param {?} _exampleDatabase\n * @param {?} _paginator\n */\nconstructor(private _exampleDatabase: ExampleDatabase,\nprivate _paginator: MdPaginator) {\n    super();\n  }\n/**\n * Connect function called by the table to retrieve one stream containing the data to render.\n * @return {?}\n */\nconnect(): Observable<UserData[]> {\n    const /** @type {?} */ displayDataChanges = [\n      this._exampleDatabase.dataChange,\n      this._paginator.page,\n    ];\n\n    return Observable.merge(...displayDataChanges).map(() => {\n      const /** @type {?} */ data = this._exampleDatabase.data.slice();\n\n      // Grab the page's slice of data.\n      const /** @type {?} */ startIndex = this._paginator.pageIndex * this._paginator.pageSize;\n      return data.splice(startIndex, this._paginator.pageSize);\n    });\n  }\n/**\n * @return {?}\n */\ndisconnect() {}\n}\n\nfunction ExampleDataSource_tsickle_Closure_declarations() {\n/** @type {?} */\nExampleDataSource.prototype._exampleDatabase;\n/** @type {?} */\nExampleDataSource.prototype._paginator;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component, ViewChild} from '@angular/core';\nimport {DataSource} from '@angular/cdk/collections';\nimport {MdSort} from '@angular/material';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {Observable} from 'rxjs/Observable';\nimport'rxjs/add/operator/startWith';\nimport'rxjs/add/observable/merge';\nimport'rxjs/add/operator/map';\n/**\n * \\@title Table with sorting\n */\nexport class TableSortingExample {\n  displayedColumns = ['userId', 'userName', 'progress', 'color'];\n  exampleDatabase = new ExampleDatabase();\n  dataSource: ExampleDataSource | null;\n\n   sort: MdSort;\n/**\n * @return {?}\n */\nngOnInit() {\n    this.dataSource = new ExampleDataSource(this.exampleDatabase, this.sort);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'table-sorting-example',\n  styleUrls: ['table-sorting-example.css'],\n  templateUrl: 'table-sorting-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'sort': [{ type: ViewChild, args: [MdSort, ] },],\n};\n}\n\nfunction TableSortingExample_tsickle_Closure_declarations() {\n/** @type {?} */\nTableSortingExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTableSortingExample.ctorParameters;\n/** @type {?} */\nTableSortingExample.propDecorators;\n/** @type {?} */\nTableSortingExample.prototype.displayedColumns;\n/** @type {?} */\nTableSortingExample.prototype.exampleDatabase;\n/** @type {?} */\nTableSortingExample.prototype.dataSource;\n/** @type {?} */\nTableSortingExample.prototype.sort;\n}\n\n/**\n * Constants used to fill up our data base.\n */\nconst COLORS = ['maroon', 'red', 'orange', 'yellow', 'olive', 'green', 'purple',\n  'fuchsia', 'lime', 'teal', 'aqua', 'blue', 'navy', 'black', 'gray'];\nconst /** @type {?} */ NAMES = ['Maia', 'Asher', 'Olivia', 'Atticus', 'Amelia', 'Jack',\n  'Charlotte', 'Theodore', 'Isla', 'Oliver', 'Isabella', 'Jasper',\n  'Cora', 'Levi', 'Violet', 'Arthur', 'Mia', 'Thomas', 'Elizabeth'];\n\nexport interface UserData {\n  id: string;\n  name: string;\n  progress: string;\n  color: string;\n}\n/**\n * An example database that the data source uses to retrieve data for the table.\n */\nexport class ExampleDatabase {\n/**\n * Stream that emits whenever the data has been modified.\n */\ndataChange: BehaviorSubject<UserData[]> = new BehaviorSubject<UserData[]>([]);\n/**\n * @return {?}\n */\nget data(): UserData[] { return this.dataChange.value; }\nconstructor() {\n    // Fill up the database with 100 users.\n    for (let i = 0; i < 100; i++) { this.addUser(); }\n  }\n/**\n * Adds a new user to the database.\n * @return {?}\n */\naddUser() {\n    const /** @type {?} */ copiedData = this.data.slice();\n    copiedData.push(this.createNewUser());\n    this.dataChange.next(copiedData);\n  }\n/**\n * Builds and returns a new User.\n * @return {?}\n */\nprivate createNewUser() {\n    const /** @type {?} */ name =\n        NAMES[Math.round(Math.random() * (NAMES.length - 1))] + ' ' +\n        NAMES[Math.round(Math.random() * (NAMES.length - 1))].charAt(0) + '.';\n\n    return {\n      id: (this.data.length + 1).toString(),\n      name: name,\n      progress: Math.round(Math.random() * 100).toString(),\n      color: COLORS[Math.round(Math.random() * (COLORS.length - 1))]\n    };\n  }\n}\n\nfunction ExampleDatabase_tsickle_Closure_declarations() {\n/**\n * Stream that emits whenever the data has been modified.\n * @type {?}\n */\nExampleDatabase.prototype.dataChange;\n}\n\n/**\n * Data source to provide what data should be rendered in the table. Note that the data source\n * can retrieve its data in any way. In this case, the data source is provided a reference\n * to a common data base, ExampleDatabase. It is not the data source's responsibility to manage\n * the underlying data. Instead, it only needs to take the data and send the table exactly what\n * should be rendered.\n */\nexport class ExampleDataSource extends DataSource<any> {\n/**\n * @param {?} _exampleDatabase\n * @param {?} _sort\n */\nconstructor(private _exampleDatabase: ExampleDatabase,\nprivate _sort: MdSort) {\n    super();\n  }\n/**\n * Connect function called by the table to retrieve one stream containing the data to render.\n * @return {?}\n */\nconnect(): Observable<UserData[]> {\n    const /** @type {?} */ displayDataChanges = [\n      this._exampleDatabase.dataChange,\n      this._sort.mdSortChange,\n    ];\n\n    return Observable.merge(...displayDataChanges).map(() => {\n      return this.getSortedData();\n    });\n  }\n/**\n * @return {?}\n */\ndisconnect() {}\n/**\n * Returns a sorted copy of the database data.\n * @return {?}\n */\ngetSortedData(): UserData[] {\n    const /** @type {?} */ data = this._exampleDatabase.data.slice();\n    if (!this._sort.active || this._sort.direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let /** @type {?} */ propertyA: number|string = '';\n      let /** @type {?} */ propertyB: number|string = '';\n\n      switch (this._sort.active) {\n        case 'userId': [propertyA, propertyB] = [a.id, b.id]; break;\n        case 'userName': [propertyA, propertyB] = [a.name, b.name]; break;\n        case 'progress': [propertyA, propertyB] = [a.progress, b.progress]; break;\n        case 'color': [propertyA, propertyB] = [a.color, b.color]; break;\n      }\n\n      let /** @type {?} */ valueA = isNaN(+propertyA) ? propertyA : +propertyA;\n      let /** @type {?} */ valueB = isNaN(+propertyB) ? propertyB : +propertyB;\n\n      return (valueA < valueB ? -1 : 1) * (this._sort.direction == 'asc' ? 1 : -1);\n    });\n  }\n}\n\nfunction ExampleDataSource_tsickle_Closure_declarations() {\n/** @type {?} */\nExampleDataSource.prototype._exampleDatabase;\n/** @type {?} */\nExampleDataSource.prototype._sort;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic tabs\n */\nexport class TabsOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'tabs-overview-example',\n  templateUrl: 'tabs-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction TabsOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nTabsOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTabsOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Complex Example\n */\nexport class TabsTemplateLabelExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'tabs-template-label-example',\n  templateUrl: 'tabs-template-label-example.html',\n  styleUrls: ['./tabs-template-label-example.css']\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction TabsTemplateLabelExample_tsickle_Closure_declarations() {\n/** @type {?} */\nTabsTemplateLabelExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTabsTemplateLabelExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Multi-row toolbar\n */\nexport class ToolbarMultirowExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'toolbar-multirow-example',\n  templateUrl: 'toolbar-multirow-example.html',\n  styleUrls: ['toolbar-multirow-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ToolbarMultirowExample_tsickle_Closure_declarations() {\n/** @type {?} */\nToolbarMultirowExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nToolbarMultirowExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic tooltip\n */\nexport class TooltipOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'tooltip-overview-example',\n  templateUrl: 'tooltip-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction TooltipOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nTooltipOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTooltipOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic toolbar\n */\nexport class ToolbarOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'toolbar-overview-example',\n  templateUrl: 'toolbar-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ToolbarOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nToolbarOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nToolbarOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Tooltip with custom position\n */\nexport class TooltipPositionExample {\n  position = 'before';\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'tooltip-position-example',\n  templateUrl: 'tooltip-position-example.html',\n  styleUrls: ['tooltip-position-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction TooltipPositionExample_tsickle_Closure_declarations() {\n/** @type {?} */\nTooltipPositionExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTooltipPositionExample.ctorParameters;\n/** @type {?} */\nTooltipPositionExample.prototype.position;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/* tslint:disable */\n/** DO NOT MANUALLY EDIT THIS FILE, IT IS GENERATED VIA GULP 'build-examples-module' */\n\nimport {NgModule} from '@angular/core';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {CommonModule} from '@angular/common';\nimport {ExampleMaterialModule} from './material-module';\n\nexport interface LiveExample {\n  title: string;\n  component: any;\n  additionalFiles?: string[];\n  selectorName?: string;\n}\n\nimport {AutocompleteDisplayExample} from './autocomplete-display/autocomplete-display-example';\nimport {AutocompleteFilterExample} from './autocomplete-filter/autocomplete-filter-example';\nimport {AutocompleteOverviewExample} from './autocomplete-overview/autocomplete-overview-example';\nimport {AutocompleteSimpleExample} from './autocomplete-simple/autocomplete-simple-example';\nimport {ButtonOverviewExample} from './button-overview/button-overview-example';\nimport {ButtonToggleExclusiveExample} from './button-toggle-exclusive/button-toggle-exclusive-example';\nimport {ButtonToggleOverviewExample} from './button-toggle-overview/button-toggle-overview-example';\nimport {ButtonTypesExample} from './button-types/button-types-example';\nimport {CardFancyExample} from './card-fancy/card-fancy-example';\nimport {CardOverviewExample} from './card-overview/card-overview-example';\nimport {CdkTableBasicExample} from './cdk-table-basic/cdk-table-basic-example';\nimport {CheckboxConfigurableExample} from './checkbox-configurable/checkbox-configurable-example';\nimport {CheckboxOverviewExample} from './checkbox-overview/checkbox-overview-example';\nimport {ChipsOverviewExample} from './chips-overview/chips-overview-example';\nimport {ChipsStackedExample} from './chips-stacked/chips-stacked-example';\nimport {DatepickerApiExample} from './datepicker-api/datepicker-api-example';\nimport {DatepickerFilterExample} from './datepicker-filter/datepicker-filter-example';\nimport {DatepickerMinMaxExample} from './datepicker-min-max/datepicker-min-max-example';\nimport {DatepickerOverviewExample} from './datepicker-overview/datepicker-overview-example';\nimport {DatepickerStartViewExample} from './datepicker-start-view/datepicker-start-view-example';\nimport {DatepickerTouchExample} from './datepicker-touch/datepicker-touch-example';\nimport {DialogContentExampleDialog,DialogContentExample} from './dialog-content/dialog-content-example';\nimport {DialogDataExampleDialog,DialogDataExample} from './dialog-data/dialog-data-example';\nimport {DialogElementsExampleDialog,DialogElementsExample} from './dialog-elements/dialog-elements-example';\nimport {DialogOverviewExampleDialog,DialogOverviewExample} from './dialog-overview/dialog-overview-example';\nimport {ExpansionOverviewExample} from './expansion-overview/expansion-overview-example';\nimport {ExpansionStepsExample} from './expansion-steps/expansion-steps-example';\nimport {GridListDynamicExample} from './grid-list-dynamic/grid-list-dynamic-example';\nimport {GridListOverviewExample} from './grid-list-overview/grid-list-overview-example';\nimport {IconOverviewExample} from './icon-overview/icon-overview-example';\nimport {IconSvgExample} from './icon-svg-example/icon-svg-example';\nimport {InputClearableExample} from './input-clearable/input-clearable-example';\nimport {InputErrorsExample} from './input-errors/input-errors-example';\nimport {InputFormExample} from './input-form/input-form-example';\nimport {InputHintExample} from './input-hint/input-hint-example';\nimport {InputOverviewExample} from './input-overview/input-overview-example';\nimport {InputPrefixSuffixExample} from './input-prefix-suffix/input-prefix-suffix-example';\nimport {ListOverviewExample} from './list-overview/list-overview-example';\nimport {ListSectionsExample} from './list-sections/list-sections-example';\nimport {ListSelectionExample} from './list-selection/list-selection-example';\nimport {MenuIconsExample} from './menu-icons/menu-icons-example';\nimport {MenuOverviewExample} from './menu-overview/menu-overview-example';\nimport {NestedMenuExample} from './nested-menu/nested-menu-example';\nimport {PaginatorConfigurableExample} from './paginator-configurable/paginator-configurable-example';\nimport {PaginatorOverviewExample} from './paginator-overview/paginator-overview-example';\nimport {ProgressBarConfigurableExample} from './progress-bar-configurable/progress-bar-configurable-example';\nimport {ProgressBarOverviewExample} from './progress-bar-overview/progress-bar-overview-example';\nimport {ProgressSpinnerConfigurableExample} from './progress-spinner-configurable/progress-spinner-configurable-example';\nimport {ProgressSpinnerOverviewExample} from './progress-spinner-overview/progress-spinner-overview-example';\nimport {RadioNgModelExample} from './radio-ng-model/radio-ng-model-example';\nimport {RadioOverviewExample} from './radio-overview/radio-overview-example';\nimport {SelectFormExample} from './select-form/select-form-example';\nimport {SelectOverviewExample} from './select-overview/select-overview-example';\nimport {SidenavFabExample} from './sidenav-fab/sidenav-fab-example';\nimport {SidenavOverviewExample} from './sidenav-overview/sidenav-overview-example';\nimport {SlideToggleConfigurableExample} from './slide-toggle-configurable/slide-toggle-configurable-example';\nimport {SlideToggleFormsExample} from './slide-toggle-forms/slide-toggle-forms-example';\nimport {SlideToggleOverviewExample} from './slide-toggle-overview/slide-toggle-overview-example';\nimport {SliderConfigurableExample} from './slider-configurable/slider-configurable-example';\nimport {SliderOverviewExample} from './slider-overview/slider-overview-example';\nimport {PizzaPartyComponent,SnackBarComponentExample} from './snack-bar-component/snack-bar-component-example';\nimport {SnackBarOverviewExample} from './snack-bar-overview/snack-bar-overview-example';\nimport {SortOverviewExample} from './sort-overview/sort-overview-example';\nimport {StepperOverviewExample} from './stepper-overview/stepper-overview-example';\nimport {TableBasicExample} from './table-basic/table-basic-example';\nimport {TableFilteringExample} from './table-filtering/table-filtering-example';\nimport {TableHttpExample} from './table-http/table-http-example';\nimport {TableOverviewExample} from './table-overview/table-overview-example';\nimport {TablePaginationExample} from './table-pagination/table-pagination-example';\nimport {TableSortingExample} from './table-sorting/table-sorting-example';\nimport {TabsOverviewExample} from './tabs-overview/tabs-overview-example';\nimport {TabsTemplateLabelExample} from './tabs-template-label/tabs-template-label-example';\nimport {ToolbarMultirowExample} from './toolbar-multirow/toolbar-multirow-example';\nimport {ToolbarOverviewExample} from './toolbar-overview/toolbar-overview-example';\nimport {TooltipOverviewExample} from './tooltip-overview/tooltip-overview-example';\nimport {TooltipPositionExample} from './tooltip-position/tooltip-position-example';\n\nexport const /** @type {?} */ EXAMPLE_COMPONENTS = {\n  'autocomplete-display': {\n    title: 'Display value autocomplete',\n    component: AutocompleteDisplayExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'autocomplete-filter': {\n    title: 'Filter autocomplete',\n    component: AutocompleteFilterExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'autocomplete-overview': {\n    title: 'Autocomplete overview',\n    component: AutocompleteOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'autocomplete-simple': {\n    title: 'Simple autocomplete',\n    component: AutocompleteSimpleExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'button-overview': {\n    title: 'Basic buttons',\n    component: ButtonOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'button-toggle-exclusive': {\n    title: 'Exclusive selection',\n    component: ButtonToggleExclusiveExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'button-toggle-overview': {\n    title: 'Basic button-toggles',\n    component: ButtonToggleOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'button-types': {\n    title: 'Button varieties',\n    component: ButtonTypesExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'card-fancy': {\n    title: 'Card with multiple sections',\n    component: CardFancyExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'card-overview': {\n    title: 'Basic cards',\n    component: CardOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'cdk-table-basic': {\n    title: 'Basic CDK data-table',\n    component: CdkTableBasicExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'checkbox-configurable': {\n    title: 'Configurable checkbox',\n    component: CheckboxConfigurableExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'checkbox-overview': {\n    title: 'Basic checkboxes',\n    component: CheckboxOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'chips-overview': {\n    title: 'Basic chips',\n    component: ChipsOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'chips-stacked': {\n    title: 'Stacked chips',\n    component: ChipsStackedExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'datepicker-api': {\n    title: 'Datepicker API',\n    component: DatepickerApiExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'datepicker-filter': {\n    title: 'Datepicker Filter',\n    component: DatepickerFilterExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'datepicker-min-max': {\n    title: 'Datepicker Min Max',\n    component: DatepickerMinMaxExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'datepicker-overview': {\n    title: 'Basic datepicker',\n    component: DatepickerOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'datepicker-start-view': {\n    title: 'Datepicker start date',\n    component: DatepickerStartViewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'datepicker-touch': {\n    title: 'Datepicker Touch',\n    component: DatepickerTouchExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'dialog-content': {\n    title: 'Dialog with header, scrollable content and actions',\n    component: DialogContentExample,\n    additionalFiles: [\"dialog-content-example-dialog.html\"],\n    selectorName: 'DialogContentExample, DialogContentExampleDialog'\n  },\n  'dialog-data': {\n    title: 'Injecting data when opening a dialog',\n    component: DialogDataExample,\n    additionalFiles: [\"dialog-data-example-dialog.html\"],\n    selectorName: 'DialogDataExample, DialogDataExampleDialog'\n  },\n  'dialog-elements': {\n    title: 'Dialog elements',\n    component: DialogElementsExample,\n    additionalFiles: [\"dialog-elements-example-dialog.html\"],\n    selectorName: 'DialogElementsExample, DialogElementsExampleDialog'\n  },\n  'dialog-overview': {\n    title: 'Dialog Overview',\n    component: DialogOverviewExample,\n    additionalFiles: [\"dialog-overview-example-dialog.html\"],\n    selectorName: 'DialogOverviewExample, DialogOverviewExampleDialog'\n  },\n  'expansion-overview': {\n    title: 'Basic expansion panel',\n    component: ExpansionOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'expansion-steps': {\n    title: 'Expansion panel as accordion',\n    component: ExpansionStepsExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'grid-list-dynamic': {\n    title: 'Dynamic grid-list',\n    component: GridListDynamicExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'grid-list-overview': {\n    title: 'Basic grid-list',\n    component: GridListOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'icon-overview': {\n    title: 'Basic icons',\n    component: IconOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'icon-svg': {\n    title: 'SVG icons',\n    component: IconSvgExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'input-clearable': {\n    title: 'Input Clearable',\n    component: InputClearableExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'input-errors': {\n    title: 'Input Errors',\n    component: InputErrorsExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'input-form': {\n    title: 'Inputs in a form',\n    component: InputFormExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'input-hint': {\n    title: 'Input hints',\n    component: InputHintExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'input-overview': {\n    title: 'Basic Inputs',\n    component: InputOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'input-prefix-suffix': {\n    title: 'Input Prefixes and Suffixes',\n    component: InputPrefixSuffixExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'list-overview': {\n    title: 'Basic list',\n    component: ListOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'list-sections': {\n    title: 'List with sections',\n    component: ListSectionsExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'list-selection': {\n    title: 'List with selection',\n    component: ListSelectionExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'menu-icons': {\n    title: 'Menu with icons',\n    component: MenuIconsExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'menu-overview': {\n    title: 'Basic menu',\n    component: MenuOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'nested-menu': {\n    title: 'Nested menu',\n    component: NestedMenuExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'paginator-configurable': {\n    title: 'Configurable paginator',\n    component: PaginatorConfigurableExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'paginator-overview': {\n    title: 'Paginator',\n    component: PaginatorOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'progress-bar-configurable': {\n    title: 'Configurable progress-bar',\n    component: ProgressBarConfigurableExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'progress-bar-overview': {\n    title: 'Basic progress-bar',\n    component: ProgressBarOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'progress-spinner-configurable': {\n    title: 'Configurable progress spinner',\n    component: ProgressSpinnerConfigurableExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'progress-spinner-overview': {\n    title: 'Basic progress-spinner',\n    component: ProgressSpinnerOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'radio-ng-model': {\n    title: 'Radios with ngModel',\n    component: RadioNgModelExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'radio-overview': {\n    title: 'Basic radios',\n    component: RadioOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'select-form': {\n    title: 'Select in a form',\n    component: SelectFormExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'select-overview': {\n    title: 'Basic select',\n    component: SelectOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'sidenav-fab': {\n    title: 'Sidenav with a FAB',\n    component: SidenavFabExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'sidenav-overview': {\n    title: 'Basic sidenav',\n    component: SidenavOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'slide-toggle-configurable': {\n    title: 'Configurable slide-toggle',\n    component: SlideToggleConfigurableExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'slide-toggle-forms': {\n    title: 'Slide-toggle with forms',\n    component: SlideToggleFormsExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'slide-toggle-overview': {\n    title: 'Basic slide-toggles',\n    component: SlideToggleOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'slider-configurable': {\n    title: 'Configurable slider',\n    component: SliderConfigurableExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'slider-overview': {\n    title: 'Basic slider',\n    component: SliderOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'snack-bar-component': {\n    title: 'Snack-bar with a custom component',\n    component: SnackBarComponentExample,\n    additionalFiles: [\"snack-bar-component-example-snack.html\"],\n    selectorName: 'SnackBarComponentExample, PizzaPartyComponent'\n  },\n  'snack-bar-overview': {\n    title: 'Basic snack-bar',\n    component: SnackBarOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'sort-overview': {\n    title: 'Sorting overview',\n    component: SortOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'stepper-overview': {\n    title: 'Stepper overview',\n    component: StepperOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'table-basic': {\n    title: 'Basic table',\n    component: TableBasicExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'table-filtering': {\n    title: 'Table with filtering',\n    component: TableFilteringExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'table-http': {\n    title: 'Table retrieving data through HTTP',\n    component: TableHttpExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'table-overview': {\n    title: 'Feature-rich data table',\n    component: TableOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'table-pagination': {\n    title: 'Table with pagination',\n    component: TablePaginationExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'table-sorting': {\n    title: 'Table with sorting',\n    component: TableSortingExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'tabs-overview': {\n    title: 'Basic tabs',\n    component: TabsOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'tabs-template-label': {\n    title: 'Complex Example',\n    component: TabsTemplateLabelExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'toolbar-multirow': {\n    title: 'Multi-row toolbar',\n    component: ToolbarMultirowExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'toolbar-overview': {\n    title: 'Basic toolbar',\n    component: ToolbarOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'tooltip-overview': {\n    title: 'Basic tooltip',\n    component: TooltipOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'tooltip-position': {\n    title: 'Tooltip with custom position',\n    component: TooltipPositionExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n};\n\nexport const /** @type {?} */ EXAMPLE_LIST = [\n  AutocompleteDisplayExample,\n  AutocompleteFilterExample,\n  AutocompleteOverviewExample,\n  AutocompleteSimpleExample,\n  ButtonOverviewExample,\n  ButtonToggleExclusiveExample,\n  ButtonToggleOverviewExample,\n  ButtonTypesExample,\n  CardFancyExample,\n  CardOverviewExample,\n  CdkTableBasicExample,\n  CheckboxConfigurableExample,\n  CheckboxOverviewExample,\n  ChipsOverviewExample,\n  ChipsStackedExample,\n  DatepickerApiExample,\n  DatepickerFilterExample,\n  DatepickerMinMaxExample,\n  DatepickerOverviewExample,\n  DatepickerStartViewExample,\n  DatepickerTouchExample,\n  DialogContentExampleDialog,DialogContentExample,\n  DialogDataExampleDialog,DialogDataExample,\n  DialogElementsExampleDialog,DialogElementsExample,\n  DialogOverviewExampleDialog,DialogOverviewExample,\n  ExpansionOverviewExample,\n  ExpansionStepsExample,\n  GridListDynamicExample,\n  GridListOverviewExample,\n  IconOverviewExample,\n  IconSvgExample,\n  InputClearableExample,\n  InputErrorsExample,\n  InputFormExample,\n  InputHintExample,\n  InputOverviewExample,\n  InputPrefixSuffixExample,\n  ListOverviewExample,\n  ListSectionsExample,\n  ListSelectionExample,\n  MenuIconsExample,\n  MenuOverviewExample,\n  NestedMenuExample,\n  PaginatorConfigurableExample,\n  PaginatorOverviewExample,\n  ProgressBarConfigurableExample,\n  ProgressBarOverviewExample,\n  ProgressSpinnerConfigurableExample,\n  ProgressSpinnerOverviewExample,\n  RadioNgModelExample,\n  RadioOverviewExample,\n  SelectFormExample,\n  SelectOverviewExample,\n  SidenavFabExample,\n  SidenavOverviewExample,\n  SlideToggleConfigurableExample,\n  SlideToggleFormsExample,\n  SlideToggleOverviewExample,\n  SliderConfigurableExample,\n  SliderOverviewExample,\n  PizzaPartyComponent,SnackBarComponentExample,\n  SnackBarOverviewExample,\n  SortOverviewExample,\n  StepperOverviewExample,\n  TableBasicExample,\n  TableFilteringExample,\n  TableHttpExample,\n  TableOverviewExample,\n  TablePaginationExample,\n  TableSortingExample,\n  TabsOverviewExample,\n  TabsTemplateLabelExample,\n  ToolbarMultirowExample,\n  ToolbarOverviewExample,\n  TooltipOverviewExample,\n  TooltipPositionExample,\n];\nexport class ExampleModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: EXAMPLE_LIST,\n  entryComponents: EXAMPLE_LIST,\n  imports: [\n    ExampleMaterialModule,\n    FormsModule,\n    ReactiveFormsModule,\n    CommonModule\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ExampleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nExampleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nExampleModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Input Prefixes and Suffixes\n */\nexport class InputPrefixSuffixExample { static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'input-prefix-suffix-example',\n  templateUrl: 'input-prefix-suffix-example.html',\n  styleUrls: ['input-prefix-suffix-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction InputPrefixSuffixExample_tsickle_Closure_declarations() {\n/** @type {?} */\nInputPrefixSuffixExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nInputPrefixSuffixExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic list\n */\nexport class ListOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'list-overview-example',\n  templateUrl: 'list-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ListOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nListOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nListOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title List with sections\n */\nexport class ListSectionsExample {\n  folders = [\n    {\n      name: 'Photos',\n      updated: new Date('1/1/16'),\n    },\n    {\n      name: 'Recipes',\n      updated: new Date('1/17/16'),\n    },\n    {\n      name: 'Work',\n      updated: new Date('1/28/16'),\n    }\n  ];\n  notes = [\n    {\n      name: 'Vacation Itinerary',\n      updated: new Date('2/20/16'),\n    },\n    {\n      name: 'Kitchen Remodel',\n      updated: new Date('1/18/16'),\n    }\n  ];\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'list-sections-example',\n  styleUrls: ['list-sections-example.css'],\n  templateUrl: 'list-sections-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ListSectionsExample_tsickle_Closure_declarations() {\n/** @type {?} */\nListSectionsExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nListSectionsExample.ctorParameters;\n/** @type {?} */\nListSectionsExample.prototype.folders;\n/** @type {?} */\nListSectionsExample.prototype.notes;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title List with selection\n */\nexport class ListSelectionExample {\n  typesOfShoes = ['Boots', 'Clogs', 'Loafers', 'Moccasins', 'Sneakers'];\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'list-selection-example',\n  styleUrls: ['list-selection-example.css'],\n  templateUrl: 'list-selection-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ListSelectionExample_tsickle_Closure_declarations() {\n/** @type {?} */\nListSelectionExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nListSelectionExample.ctorParameters;\n/** @type {?} */\nListSelectionExample.prototype.typesOfShoes;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Menu with icons\n */\nexport class MenuIconsExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'menu-icons-example',\n  templateUrl: 'menu-icons-example.html',\n  styleUrls: ['menu-icons-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MenuIconsExample_tsickle_Closure_declarations() {\n/** @type {?} */\nMenuIconsExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMenuIconsExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic menu\n */\nexport class MenuOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'menu-overview-example',\n  templateUrl: 'menu-overview-example.html',\n  styleUrls: ['menu-overview-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MenuOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nMenuOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMenuOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Nested menu\n */\nexport class NestedMenuExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'nested-menu-example',\n  templateUrl: 'nested-menu-example.html',\n  styleUrls: ['nested-menu-example.css']\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NestedMenuExample_tsickle_Closure_declarations() {\n/** @type {?} */\nNestedMenuExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNestedMenuExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\nimport {PageEvent} from '@angular/material';\n/**\n * \\@title Configurable paginator\n */\nexport class PaginatorConfigurableExample {\n  // MdPaginator Inputs\n  length = 100;\n  pageSize = 10;\n  pageSizeOptions = [5, 10, 25, 100];\n\n  // MdPaginator Output\n  pageEvent: PageEvent;\n/**\n * @param {?} setPageSizeOptionsInput\n * @return {?}\n */\nsetPageSizeOptions(setPageSizeOptionsInput: string) {\n    this.pageSizeOptions = setPageSizeOptionsInput.split(',').map(str => +str);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'paginator-configurable-example',\n  templateUrl: 'paginator-configurable-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction PaginatorConfigurableExample_tsickle_Closure_declarations() {\n/** @type {?} */\nPaginatorConfigurableExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPaginatorConfigurableExample.ctorParameters;\n/** @type {?} */\nPaginatorConfigurableExample.prototype.length;\n/** @type {?} */\nPaginatorConfigurableExample.prototype.pageSize;\n/** @type {?} */\nPaginatorConfigurableExample.prototype.pageSizeOptions;\n/** @type {?} */\nPaginatorConfigurableExample.prototype.pageEvent;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Paginator\n */\nexport class PaginatorOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'paginator-overview-example',\n  templateUrl: 'paginator-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction PaginatorOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nPaginatorOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPaginatorOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Configurable progress-bar\n */\nexport class ProgressBarConfigurableExample {\n  color = 'primary';\n  mode = 'determinate';\n  value = 50;\n  bufferValue = 75;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'progress-bar-configurable-example',\n  templateUrl: 'progress-bar-configurable-example.html',\n  styleUrls: ['progress-bar-configurable-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ProgressBarConfigurableExample_tsickle_Closure_declarations() {\n/** @type {?} */\nProgressBarConfigurableExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nProgressBarConfigurableExample.ctorParameters;\n/** @type {?} */\nProgressBarConfigurableExample.prototype.color;\n/** @type {?} */\nProgressBarConfigurableExample.prototype.mode;\n/** @type {?} */\nProgressBarConfigurableExample.prototype.value;\n/** @type {?} */\nProgressBarConfigurableExample.prototype.bufferValue;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic progress-bar\n */\nexport class ProgressBarOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'progress-bar-overview-example',\n  templateUrl: 'progress-bar-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ProgressBarOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nProgressBarOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nProgressBarOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Configurable progress spinner\n */\nexport class ProgressSpinnerConfigurableExample {\n  color = 'primary';\n  mode = 'determinate';\n  value = 50;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'progress-spinner-configurable-example',\n  templateUrl: 'progress-spinner-configurable-example.html',\n  styleUrls: ['progress-spinner-configurable-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ProgressSpinnerConfigurableExample_tsickle_Closure_declarations() {\n/** @type {?} */\nProgressSpinnerConfigurableExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nProgressSpinnerConfigurableExample.ctorParameters;\n/** @type {?} */\nProgressSpinnerConfigurableExample.prototype.color;\n/** @type {?} */\nProgressSpinnerConfigurableExample.prototype.mode;\n/** @type {?} */\nProgressSpinnerConfigurableExample.prototype.value;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic progress-spinner\n */\nexport class ProgressSpinnerOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'progress-spinner-overview-example',\n  templateUrl: 'progress-spinner-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ProgressSpinnerOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nProgressSpinnerOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nProgressSpinnerOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Radios with ngModel\n */\nexport class RadioNgModelExample {\n  favoriteSeason: string;\n\n  seasons = [\n    'Winter',\n    'Spring',\n    'Summer',\n    'Autumn',\n  ];\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'radio-ng-model-example',\n  templateUrl: 'radio-ng-model-example.html',\n  styleUrls: ['radio-ng-model-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction RadioNgModelExample_tsickle_Closure_declarations() {\n/** @type {?} */\nRadioNgModelExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRadioNgModelExample.ctorParameters;\n/** @type {?} */\nRadioNgModelExample.prototype.favoriteSeason;\n/** @type {?} */\nRadioNgModelExample.prototype.seasons;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic radios\n */\nexport class RadioOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'radio-overview-example',\n  templateUrl: 'radio-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction RadioOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nRadioOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRadioOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Select in a form\n */\nexport class SelectFormExample {\n  selectedValue: string;\n\n  foods = [\n    {value: 'steak-0', viewValue: 'Steak'},\n    {value: 'pizza-1', viewValue: 'Pizza'},\n    {value: 'tacos-2', viewValue: 'Tacos'}\n  ];\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'select-form-example',\n  templateUrl: 'select-form-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SelectFormExample_tsickle_Closure_declarations() {\n/** @type {?} */\nSelectFormExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSelectFormExample.ctorParameters;\n/** @type {?} */\nSelectFormExample.prototype.selectedValue;\n/** @type {?} */\nSelectFormExample.prototype.foods;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic select\n */\nexport class SelectOverviewExample {\n  foods = [\n    {value: 'steak-0', viewValue: 'Steak'},\n    {value: 'pizza-1', viewValue: 'Pizza'},\n    {value: 'tacos-2', viewValue: 'Tacos'}\n  ];\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'select-overview-example',\n  templateUrl: 'select-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SelectOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nSelectOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSelectOverviewExample.ctorParameters;\n/** @type {?} */\nSelectOverviewExample.prototype.foods;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component, ViewEncapsulation} from '@angular/core';\n/**\n * \\@title Sidenav with a FAB\n */\nexport class SidenavFabExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'sidenav-fab-example',\n  templateUrl: 'sidenav-fab-example.html',\n  styleUrls: ['sidenav-fab-example.css'],\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SidenavFabExample_tsickle_Closure_declarations() {\n/** @type {?} */\nSidenavFabExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSidenavFabExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic sidenav\n */\nexport class SidenavOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'sidenav-overview-example',\n  templateUrl: 'sidenav-overview-example.html',\n  styleUrls: ['sidenav-overview-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SidenavOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nSidenavOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSidenavOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Configurable slide-toggle\n */\nexport class SlideToggleConfigurableExample {\n  color = 'accent';\n  checked = false;\n  disabled = false;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'slide-toggle-configurable-example',\n  templateUrl: 'slide-toggle-configurable-example.html',\n  styleUrls: ['slide-toggle-configurable-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SlideToggleConfigurableExample_tsickle_Closure_declarations() {\n/** @type {?} */\nSlideToggleConfigurableExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSlideToggleConfigurableExample.ctorParameters;\n/** @type {?} */\nSlideToggleConfigurableExample.prototype.color;\n/** @type {?} */\nSlideToggleConfigurableExample.prototype.checked;\n/** @type {?} */\nSlideToggleConfigurableExample.prototype.disabled;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\n/**\n * \\@title Slide-toggle with forms\n */\nexport class SlideToggleFormsExample {\n  isChecked = true;\n  formGroup: FormGroup;\n/**\n * @param {?} formBuilder\n */\nconstructor(formBuilder: FormBuilder) {\n    this.formGroup = formBuilder.group({\n      enableWifi: '',\n      acceptTerms: ['', Validators.requiredTrue]\n    });\n  }\n/**\n * @param {?} formValue\n * @return {?}\n */\nonFormSubmit(formValue: any) {\n    alert(JSON.stringify(formValue, null, 2));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'slide-toggle-forms-example',\n  templateUrl: './slide-toggle-forms-example.html',\n  styleUrls: ['./slide-toggle-forms-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: FormBuilder, },\n];\n}\n\nfunction SlideToggleFormsExample_tsickle_Closure_declarations() {\n/** @type {?} */\nSlideToggleFormsExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSlideToggleFormsExample.ctorParameters;\n/** @type {?} */\nSlideToggleFormsExample.prototype.isChecked;\n/** @type {?} */\nSlideToggleFormsExample.prototype.formGroup;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic slide-toggles\n */\nexport class SlideToggleOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'slide-toggle-overview-example',\n  templateUrl: 'slide-toggle-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SlideToggleOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nSlideToggleOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSlideToggleOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component, ViewEncapsulation} from '@angular/core';\n/**\n * \\@title Configurable slider\n */\nexport class SliderConfigurableExample {\n  autoTicks = false;\n  disabled = false;\n  invert = false;\n  max = 100;\n  min = 0;\n  showTicks = false;\n  step = 1;\n  thumbLabel = false;\n  value = 0;\n  vertical = false;\n/**\n * @return {?}\n */\nget tickInterval(): number | 'auto' {\n    return this.showTicks ? (this.autoTicks ? 'auto' : this._tickInterval) : 0;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset tickInterval(v) {\n    this._tickInterval = Number(v);\n  }\nprivate _tickInterval = 1;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'slider-configurable-example',\n  templateUrl: 'slider-configurable-example.html',\n  styleUrls: ['slider-configurable-example.css'],\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SliderConfigurableExample_tsickle_Closure_declarations() {\n/** @type {?} */\nSliderConfigurableExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSliderConfigurableExample.ctorParameters;\n/** @type {?} */\nSliderConfigurableExample.prototype.autoTicks;\n/** @type {?} */\nSliderConfigurableExample.prototype.disabled;\n/** @type {?} */\nSliderConfigurableExample.prototype.invert;\n/** @type {?} */\nSliderConfigurableExample.prototype.max;\n/** @type {?} */\nSliderConfigurableExample.prototype.min;\n/** @type {?} */\nSliderConfigurableExample.prototype.showTicks;\n/** @type {?} */\nSliderConfigurableExample.prototype.step;\n/** @type {?} */\nSliderConfigurableExample.prototype.thumbLabel;\n/** @type {?} */\nSliderConfigurableExample.prototype.value;\n/** @type {?} */\nSliderConfigurableExample.prototype.vertical;\n/** @type {?} */\nSliderConfigurableExample.prototype._tickInterval;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic slider\n */\nexport class SliderOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'slider-overview-example',\n  templateUrl: 'slider-overview-example.html',\n  styleUrls: ['slider-overview-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SliderOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nSliderOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSliderOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\nimport {MdSnackBar} from '@angular/material';\n/**\n * \\@title Snack-bar with a custom component\n */\nexport class SnackBarComponentExample {\n/**\n * @param {?} snackBar\n */\nconstructor(public snackBar: MdSnackBar) {}\n/**\n * @return {?}\n */\nopenSnackBar() {\n    this.snackBar.openFromComponent(PizzaPartyComponent, {\n      duration: 500,\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'snack-bar-component-example',\n  templateUrl: 'snack-bar-component-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdSnackBar, },\n];\n}\n\nfunction SnackBarComponentExample_tsickle_Closure_declarations() {\n/** @type {?} */\nSnackBarComponentExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSnackBarComponentExample.ctorParameters;\n/** @type {?} */\nSnackBarComponentExample.prototype.snackBar;\n}\n\nexport class PizzaPartyComponent {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'snack-bar-component-example-snack',\n  templateUrl: 'snack-bar-component-example-snack.html',\n  styleUrls: ['snack-bar-component-example-snack.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction PizzaPartyComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nPizzaPartyComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPizzaPartyComponent.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\nimport {MdSnackBar} from '@angular/material';\n/**\n * \\@title Basic snack-bar\n */\nexport class SnackBarOverviewExample {\n/**\n * @param {?} snackBar\n */\nconstructor(public snackBar: MdSnackBar) {}\n/**\n * @param {?} message\n * @param {?} action\n * @return {?}\n */\nopenSnackBar(message: string, action: string) {\n    this.snackBar.open(message, action, {\n      duration: 2000,\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'snack-bar-overview-example',\n  templateUrl: 'snack-bar-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdSnackBar, },\n];\n}\n\nfunction SnackBarOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nSnackBarOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSnackBarOverviewExample.ctorParameters;\n/** @type {?} */\nSnackBarOverviewExample.prototype.snackBar;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\nimport {Sort} from '@angular/material';\n/**\n * \\@title Sorting overview\n */\nexport class SortOverviewExample {\n  desserts = [\n    {name: 'Frozen yogurt', calories: '159', fat: '6', carbs: '24', protein: '4'},\n    {name: 'Ice cream sandwich', calories: '237', fat: '9', carbs: '37', protein: '4'},\n    {name: 'Eclair', calories: '262', fat: '16', carbs: '24', protein: '6'},\n    {name: 'Cupcake', calories: '305', fat: '4', carbs: '67', protein: '4'},\n    {name: 'Gingerbread', calories: '356', fat: '16', carbs: '49', protein: '4'},\n  ];\n\n  sortedData;\nconstructor() {\n    this.sortedData = this.desserts.slice();\n  }\n/**\n * @param {?} sort\n * @return {?}\n */\nsortData(sort: Sort) {\n    const /** @type {?} */ data = this.desserts.slice();\n    if (!sort.active || sort.direction == '') {\n      this.sortedData = data;\n      return;\n    }\n\n    this.sortedData = data.sort((a, b) => {\n      let /** @type {?} */ isAsc = sort.direction == 'asc';\n      switch (sort.active) {\n        case 'name': return compare(a.name, b.name, isAsc);\n        case 'calories': return compare(+a.calories, +b.calories, isAsc);\n        case 'fat': return compare(+a.fat, +b.fat, isAsc);\n        case 'carbs': return compare(+a.carbs, +b.carbs, isAsc);\n        case 'protein': return compare(+a.protein, +b.protein, isAsc);\n        default: return 0;\n      }\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'sort-overview-example',\n  templateUrl: 'sort-overview-example.html',\n  styleUrls: ['sort-overview-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SortOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nSortOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSortOverviewExample.ctorParameters;\n/** @type {?} */\nSortOverviewExample.prototype.desserts;\n/** @type {?} */\nSortOverviewExample.prototype.sortedData;\n}\n\n/**\n * @param {?} a\n * @param {?} b\n * @param {?} isAsc\n * @return {?}\n */\nfunction compare(a, b, isAsc) {\n  return (a < b ? -1 : 1) * (isAsc ? 1 : -1);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\n/**\n * \\@title Stepper overview\n */\nexport class StepperOverviewExample {\n  isLinear = false;\n  firstFormGroup: FormGroup;\n  secondFormGroup: FormGroup;\n/**\n * @param {?} _formBuilder\n */\nconstructor(private _formBuilder: FormBuilder) { }\n/**\n * @return {?}\n */\nngOnInit() {\n    this.firstFormGroup = this._formBuilder.group({\n      firstCtrl: ['', Validators.required]\n    });\n    this.secondFormGroup = this._formBuilder.group({\n      secondCtrl: ['', Validators.required]\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'stepper-overview-example',\n  templateUrl: 'stepper-overview-example.html',\n  styleUrls: ['stepper-overview-example.css']\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: FormBuilder, },\n];\n}\n\nfunction StepperOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nStepperOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStepperOverviewExample.ctorParameters;\n/** @type {?} */\nStepperOverviewExample.prototype.isLinear;\n/** @type {?} */\nStepperOverviewExample.prototype.firstFormGroup;\n/** @type {?} */\nStepperOverviewExample.prototype.secondFormGroup;\n/** @type {?} */\nStepperOverviewExample.prototype._formBuilder;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\nimport {DataSource} from '@angular/cdk/collections';\nimport {Observable} from 'rxjs/Observable';\nimport'rxjs/add/observable/of';\n/**\n * \\@title Basic table\n */\nexport class TableBasicExample {\n  displayedColumns = ['position', 'name', 'weight', 'symbol'];\n  dataSource = new ExampleDataSource();\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'table-basic-example',\n  styleUrls: ['table-basic-example.css'],\n  templateUrl: 'table-basic-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction TableBasicExample_tsickle_Closure_declarations() {\n/** @type {?} */\nTableBasicExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTableBasicExample.ctorParameters;\n/** @type {?} */\nTableBasicExample.prototype.displayedColumns;\n/** @type {?} */\nTableBasicExample.prototype.dataSource;\n}\n\n\nexport interface Element {\n  name: string;\n  position: number;\n  weight: number;\n  symbol: string;\n}\n\nconst /** @type {?} */ data: Element[] = [\n  {position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H'},\n  {position: 2, name: 'Helium', weight: 4.0026, symbol: 'He'},\n  {position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li'},\n  {position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be'},\n  {position: 5, name: 'Boron', weight: 10.811, symbol: 'B'},\n  {position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C'},\n  {position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N'},\n  {position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O'},\n  {position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F'},\n  {position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne'},\n  {position: 11, name: 'Sodium', weight: 22.9897, symbol: 'Na'},\n  {position: 12, name: 'Magnesium', weight: 24.305, symbol: 'Mg'},\n  {position: 13, name: 'Aluminum', weight: 26.9815, symbol: 'Al'},\n  {position: 14, name: 'Silicon', weight: 28.0855, symbol: 'Si'},\n  {position: 15, name: 'Phosphorus', weight: 30.9738, symbol: 'P'},\n  {position: 16, name: 'Sulfur', weight: 32.065, symbol: 'S'},\n  {position: 17, name: 'Chlorine', weight: 35.453, symbol: 'Cl'},\n  {position: 18, name: 'Argon', weight: 39.948, symbol: 'Ar'},\n  {position: 19, name: 'Potassium', weight: 39.0983, symbol: 'K'},\n  {position: 20, name: 'Calcium', weight: 40.078, symbol: 'Ca'},\n];\n/**\n * Data source to provide what data should be rendered in the table. The observable provided\n * in connect should emit exactly the data that should be rendered by the table. If the data is\n * altered, the observable should emit that new set of data on the stream. In our case here,\n * we return a stream that contains only one set of data that doesn't change.\n */\nexport class ExampleDataSource extends DataSource<any> {\n/**\n * Connect function called by the table to retrieve one stream containing the data to render.\n * @return {?}\n */\nconnect(): Observable<Element[]> {\n    return Observable.of(data);\n  }\n/**\n * @return {?}\n */\ndisconnect() {}\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}","import {NgModule} from '@angular/core';\n\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MdAutocompleteModule, MdButtonModule, MdButtonToggleModule, MdPaginatorModule,\n  MdCardModule, MdCheckboxModule, MdChipsModule, MdDatepickerModule,\n  MdDialogModule, MdGridListModule, MdIconModule, MdInputModule,\n  MdListModule, MdMenuModule, MdProgressBarModule, MdProgressSpinnerModule,\n  MdRadioModule, MdSelectModule, MdSidenavModule, MdSliderModule, MdSortModule,\n  MdSlideToggleModule, MdSnackBarModule, MdTableModule, MdTabsModule, MdToolbarModule,\n  MdTooltipModule, MdFormFieldModule, MdExpansionModule, MdStepperModule\n} from '@angular/material';\nexport class ExampleMaterialModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  exports: [\n    CdkTableModule,\n    MdAutocompleteModule,\n    MdButtonModule,\n    MdButtonToggleModule,\n    MdCardModule,\n    MdCheckboxModule,\n    MdChipsModule,\n    MdDatepickerModule,\n    MdDialogModule,\n    MdExpansionModule,\n    MdFormFieldModule,\n    MdGridListModule,\n    MdIconModule,\n    MdInputModule,\n    MdListModule,\n    MdMenuModule,\n    MdProgressBarModule,\n    MdProgressSpinnerModule,\n    MdRadioModule,\n    MdSelectModule,\n    MdSlideToggleModule,\n    MdSliderModule,\n    MdSidenavModule,\n    MdSnackBarModule,\n    MdStepperModule,\n    MdTabsModule,\n    MdToolbarModule,\n    MdTooltipModule,\n    MdPaginatorModule,\n    MdSortModule,\n    MdTableModule\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ExampleMaterialModule_tsickle_Closure_declarations() {\n/** @type {?} */\nExampleMaterialModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nExampleMaterialModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {Observable} from 'rxjs/Observable';\nimport'rxjs/add/operator/startWith';\nimport'rxjs/add/operator/map';\nexport class User {\n/**\n * @param {?} name\n */\nconstructor(public name: string) { }\n}\n\nfunction User_tsickle_Closure_declarations() {\n/** @type {?} */\nUser.prototype.name;\n}\n\n/**\n * \\@title Display value autocomplete\n */\nexport class AutocompleteDisplayExample {\n\n  myControl = new FormControl();\n\n  options = [\n    new User('Mary'),\n    new User('Shelley'),\n    new User('Igor')\n  ];\n\n  filteredOptions: Observable<User[]>;\n/**\n * @return {?}\n */\nngOnInit() {\n    this.filteredOptions = this.myControl.valueChanges\n        .startWith(null)\n        .map(user => user && typeof user === 'object' ? user.name : user)\n        .map(name => name ? this.filter(name) : this.options.slice());\n  }\n/**\n * @param {?} name\n * @return {?}\n */\nfilter(name: string): User[] {\n    return this.options.filter(option =>\n      option.name.toLowerCase().indexOf(name.toLowerCase()) === 0);\n  }\n/**\n * @param {?} user\n * @return {?}\n */\ndisplayFn(user: User): string {\n    return user ? user.name : user;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'autocomplete-display-example',\n  templateUrl: 'autocomplete-display-example.html',\n  styleUrls: ['autocomplete-display-example.css']\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AutocompleteDisplayExample_tsickle_Closure_declarations() {\n/** @type {?} */\nAutocompleteDisplayExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAutocompleteDisplayExample.ctorParameters;\n/** @type {?} */\nAutocompleteDisplayExample.prototype.myControl;\n/** @type {?} */\nAutocompleteDisplayExample.prototype.options;\n/** @type {?} */\nAutocompleteDisplayExample.prototype.filteredOptions;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {Observable} from 'rxjs/Observable';\nimport'rxjs/add/operator/startWith';\nimport'rxjs/add/operator/map';\n/**\n * \\@title Filter autocomplete\n */\nexport class AutocompleteFilterExample {\n\n  myControl: FormControl = new FormControl();\n\n  options = [\n    'One',\n    'Two',\n    'Three'\n  ];\n\n  filteredOptions: Observable<string[]>;\n/**\n * @return {?}\n */\nngOnInit() {\n      this.filteredOptions = this.myControl.valueChanges\n         .startWith(null)\n         .map(val => val ? this.filter(val) : this.options.slice());\n   }\n/**\n * @param {?} val\n * @return {?}\n */\nfilter(val: string): string[] {\n      return this.options.filter(option =>\n        option.toLowerCase().indexOf(val.toLowerCase()) === 0);\n   }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'autocomplete-filter-example',\n  templateUrl: 'autocomplete-filter-example.html',\n  styleUrls: ['autocomplete-filter-example.css']\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AutocompleteFilterExample_tsickle_Closure_declarations() {\n/** @type {?} */\nAutocompleteFilterExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAutocompleteFilterExample.ctorParameters;\n/** @type {?} */\nAutocompleteFilterExample.prototype.myControl;\n/** @type {?} */\nAutocompleteFilterExample.prototype.options;\n/** @type {?} */\nAutocompleteFilterExample.prototype.filteredOptions;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\nimport {FormControl} from '@angular/forms';\n\nimport {Observable} from 'rxjs/Observable';\nimport'rxjs/add/operator/startWith';\nimport'rxjs/add/operator/map';\n/**\n * \\@title Autocomplete overview\n */\nexport class AutocompleteOverviewExample {\n  stateCtrl: FormControl;\n  filteredStates: Observable<any[]>;\n\n  states: any[] = [\n    {\n      name: 'Arkansas',\n      population: '2.978M',\n      // https://commons.wikimedia.org/wiki/File:Flag_of_Arkansas.svg\n      flag: 'https://upload.wikimedia.org/wikipedia/commons/9/9d/Flag_of_Arkansas.svg'\n    },\n    {\n      name: 'California',\n      population: '39.14M',\n      // https://commons.wikimedia.org/wiki/File:Flag_of_California.svg\n      flag: 'https://upload.wikimedia.org/wikipedia/commons/0/01/Flag_of_California.svg'\n    },\n    {\n      name: 'Florida',\n      population: '20.27M',\n      // https://commons.wikimedia.org/wiki/File:Flag_of_Florida.svg\n      flag: 'https://upload.wikimedia.org/wikipedia/commons/f/f7/Flag_of_Florida.svg'\n    },\n    {\n      name: 'Texas',\n      population: '27.47M',\n      // https://commons.wikimedia.org/wiki/File:Flag_of_Texas.svg\n      flag: 'https://upload.wikimedia.org/wikipedia/commons/f/f7/Flag_of_Texas.svg'\n    }\n  ];\nconstructor() {\n    this.stateCtrl = new FormControl();\n    this.filteredStates = this.stateCtrl.valueChanges\n        .startWith(null)\n        .map(state => state ? this.filterStates(state) : this.states.slice());\n  }\n/**\n * @param {?} name\n * @return {?}\n */\nfilterStates(name: string) {\n    return this.states.filter(state =>\n      state.name.toLowerCase().indexOf(name.toLowerCase()) === 0);\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'autocomplete-overview-example',\n  templateUrl: 'autocomplete-overview-example.html',\n  styleUrls: ['autocomplete-overview-example.css']\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AutocompleteOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nAutocompleteOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAutocompleteOverviewExample.ctorParameters;\n/** @type {?} */\nAutocompleteOverviewExample.prototype.stateCtrl;\n/** @type {?} */\nAutocompleteOverviewExample.prototype.filteredStates;\n/** @type {?} */\nAutocompleteOverviewExample.prototype.states;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\nimport {FormControl} from '@angular/forms';\n/**\n * \\@title Simple autocomplete\n */\nexport class AutocompleteSimpleExample {\n\n  myControl: FormControl = new FormControl();\n\n  options = [\n    'One',\n    'Two',\n    'Three'\n   ];\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'autocomplete-simple-example',\n  templateUrl: 'autocomplete-simple-example.html',\n  styleUrls: ['autocomplete-simple-example.css']\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AutocompleteSimpleExample_tsickle_Closure_declarations() {\n/** @type {?} */\nAutocompleteSimpleExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAutocompleteSimpleExample.ctorParameters;\n/** @type {?} */\nAutocompleteSimpleExample.prototype.myControl;\n/** @type {?} */\nAutocompleteSimpleExample.prototype.options;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic buttons\n */\nexport class ButtonOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'button-overview-example',\n  templateUrl: 'button-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ButtonOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nButtonOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nButtonOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Exclusive selection\n */\nexport class ButtonToggleExclusiveExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'button-toggle-exclusive-example',\n  templateUrl: 'button-toggle-exclusive-example.html',\n  styleUrls: ['button-toggle-exclusive-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ButtonToggleExclusiveExample_tsickle_Closure_declarations() {\n/** @type {?} */\nButtonToggleExclusiveExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nButtonToggleExclusiveExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic button-toggles\n */\nexport class ButtonToggleOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'button-toggle-overview-example',\n  templateUrl: 'button-toggle-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ButtonToggleOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nButtonToggleOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nButtonToggleOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Button varieties\n */\nexport class ButtonTypesExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'button-types-example',\n  templateUrl: 'button-types-example.html',\n  styleUrls: ['button-types-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ButtonTypesExample_tsickle_Closure_declarations() {\n/** @type {?} */\nButtonTypesExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nButtonTypesExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Card with multiple sections\n */\nexport class CardFancyExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'card-fancy-example',\n  templateUrl: 'card-fancy-example.html',\n  styleUrls: ['card-fancy-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CardFancyExample_tsickle_Closure_declarations() {\n/** @type {?} */\nCardFancyExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCardFancyExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic cards\n */\nexport class CardOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'card-overview-example',\n  templateUrl: 'card-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CardOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nCardOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCardOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\nimport {DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {Observable} from 'rxjs/Observable';\nimport'rxjs/add/operator/startWith';\nimport'rxjs/add/observable/merge';\nimport'rxjs/add/operator/map';\n/**\n * \\@title Basic CDK data-table\n */\nexport class CdkTableBasicExample {\n  displayedColumns = ['userId', 'userName', 'progress', 'color'];\n  exampleDatabase = new ExampleDatabase();\n  dataSource: ExampleDataSource | null;\n/**\n * @return {?}\n */\nngOnInit() {\n    this.dataSource = new ExampleDataSource(this.exampleDatabase);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'cdk-table-basic-example',\n  styleUrls: ['cdk-table-basic-example.css'],\n  templateUrl: 'cdk-table-basic-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CdkTableBasicExample_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkTableBasicExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkTableBasicExample.ctorParameters;\n/** @type {?} */\nCdkTableBasicExample.prototype.displayedColumns;\n/** @type {?} */\nCdkTableBasicExample.prototype.exampleDatabase;\n/** @type {?} */\nCdkTableBasicExample.prototype.dataSource;\n}\n\n/**\n * Constants used to fill up our data base.\n */\nconst COLORS = ['maroon', 'red', 'orange', 'yellow', 'olive', 'green', 'purple',\n  'fuchsia', 'lime', 'teal', 'aqua', 'blue', 'navy', 'black', 'gray'];\nconst /** @type {?} */ NAMES = ['Maia', 'Asher', 'Olivia', 'Atticus', 'Amelia', 'Jack',\n  'Charlotte', 'Theodore', 'Isla', 'Oliver', 'Isabella', 'Jasper',\n  'Cora', 'Levi', 'Violet', 'Arthur', 'Mia', 'Thomas', 'Elizabeth'];\n\nexport interface UserData {\n  id: string;\n  name: string;\n  progress: string;\n  color: string;\n}\n/**\n * An example database that the data source uses to retrieve data for the table.\n */\nexport class ExampleDatabase {\n/**\n * Stream that emits whenever the data has been modified.\n */\ndataChange: BehaviorSubject<UserData[]> = new BehaviorSubject<UserData[]>([]);\n/**\n * @return {?}\n */\nget data(): UserData[] { return this.dataChange.value; }\nconstructor() {\n    // Fill up the database with 100 users.\n    for (let i = 0; i < 100; i++) { this.addUser(); }\n  }\n/**\n * Adds a new user to the database.\n * @return {?}\n */\naddUser() {\n    const /** @type {?} */ copiedData = this.data.slice();\n    copiedData.push(this.createNewUser());\n    this.dataChange.next(copiedData);\n  }\n/**\n * Builds and returns a new User.\n * @return {?}\n */\nprivate createNewUser() {\n    const /** @type {?} */ name =\n        NAMES[Math.round(Math.random() * (NAMES.length - 1))] + ' ' +\n        NAMES[Math.round(Math.random() * (NAMES.length - 1))].charAt(0) + '.';\n\n    return {\n      id: (this.data.length + 1).toString(),\n      name: name,\n      progress: Math.round(Math.random() * 100).toString(),\n      color: COLORS[Math.round(Math.random() * (COLORS.length - 1))]\n    };\n  }\n}\n\nfunction ExampleDatabase_tsickle_Closure_declarations() {\n/**\n * Stream that emits whenever the data has been modified.\n * @type {?}\n */\nExampleDatabase.prototype.dataChange;\n}\n\n/**\n * Data source to provide what data should be rendered in the table. Note that the data source\n * can retrieve its data in any way. In this case, the data source is provided a reference\n * to a common data base, ExampleDatabase. It is not the data source's responsibility to manage\n * the underlying data. Instead, it only needs to take the data and send the table exactly what\n * should be rendered.\n */\nexport class ExampleDataSource extends DataSource<any> {\n/**\n * @param {?} _exampleDatabase\n */\nconstructor(private _exampleDatabase: ExampleDatabase) {\n    super();\n  }\n/**\n * Connect function called by the table to retrieve one stream containing the data to render.\n * @return {?}\n */\nconnect(): Observable<UserData[]> {\n    return this._exampleDatabase.dataChange;\n  }\n/**\n * @return {?}\n */\ndisconnect() {}\n}\n\nfunction ExampleDataSource_tsickle_Closure_declarations() {\n/** @type {?} */\nExampleDataSource.prototype._exampleDatabase;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Configurable checkbox\n */\nexport class CheckboxConfigurableExample {\n  checked = false;\n  indeterminate = false;\n  align = 'start';\n  disabled = false;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'checkbox-configurable-example',\n  templateUrl: 'checkbox-configurable-example.html',\n  styleUrls: ['checkbox-configurable-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CheckboxConfigurableExample_tsickle_Closure_declarations() {\n/** @type {?} */\nCheckboxConfigurableExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCheckboxConfigurableExample.ctorParameters;\n/** @type {?} */\nCheckboxConfigurableExample.prototype.checked;\n/** @type {?} */\nCheckboxConfigurableExample.prototype.indeterminate;\n/** @type {?} */\nCheckboxConfigurableExample.prototype.align;\n/** @type {?} */\nCheckboxConfigurableExample.prototype.disabled;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic checkboxes\n */\nexport class CheckboxOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'checkbox-overview-example',\n  templateUrl: 'checkbox-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CheckboxOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nCheckboxOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCheckboxOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic chips\n */\nexport class ChipsOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'chips-overview-example',\n  templateUrl: 'chips-overview-example.html',\n  styleUrls: ['chips-overview-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ChipsOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nChipsOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nChipsOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Stacked chips\n */\nexport class ChipsStackedExample {\n  color: string;\n\n  availableColors = [\n    { name: 'none', color: '' },\n    { name: 'Primary', color: 'primary' },\n    { name: 'Accent', color: 'accent' },\n    { name: 'Warn', color: 'warn' }\n  ];\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'chips-stacked-example',\n  templateUrl: 'chips-stacked-example.html',\n  styleUrls: ['chips-stacked-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ChipsStackedExample_tsickle_Closure_declarations() {\n/** @type {?} */\nChipsStackedExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nChipsStackedExample.ctorParameters;\n/** @type {?} */\nChipsStackedExample.prototype.color;\n/** @type {?} */\nChipsStackedExample.prototype.availableColors;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Datepicker API\n */\nexport class DatepickerApiExample {\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'datepicker-api-example',\n  templateUrl: 'datepicker-api-example.html',\n  styleUrls: ['datepicker-api-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction DatepickerApiExample_tsickle_Closure_declarations() {\n/** @type {?} */\nDatepickerApiExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDatepickerApiExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Datepicker Filter\n */\nexport class DatepickerFilterExample {\n  myFilter = (d: Date): boolean => {\n    const /** @type {?} */ day = d.getDay();\n    // Prevent Saturday and Sunday from being selected.\n    return day !== 0 && day !== 6;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'datepicker-filter-example',\n  templateUrl: 'datepicker-filter-example.html',\n  styleUrls: ['datepicker-filter-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction DatepickerFilterExample_tsickle_Closure_declarations() {\n/** @type {?} */\nDatepickerFilterExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDatepickerFilterExample.ctorParameters;\n/** @type {?} */\nDatepickerFilterExample.prototype.myFilter;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Datepicker Min Max\n */\nexport class DatepickerMinMaxExample {\n  minDate = new Date(2000, 0, 1);\n  maxDate = new Date(2020, 0, 1);\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'datepicker-min-max-example',\n  templateUrl: 'datepicker-min-max-example.html',\n  styleUrls: ['datepicker-min-max-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction DatepickerMinMaxExample_tsickle_Closure_declarations() {\n/** @type {?} */\nDatepickerMinMaxExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDatepickerMinMaxExample.ctorParameters;\n/** @type {?} */\nDatepickerMinMaxExample.prototype.minDate;\n/** @type {?} */\nDatepickerMinMaxExample.prototype.maxDate;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic datepicker\n */\nexport class DatepickerOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'datepicker-overview-example',\n  templateUrl: 'datepicker-overview-example.html',\n  styleUrls: ['datepicker-overview-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction DatepickerOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nDatepickerOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDatepickerOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Datepicker start date\n */\nexport class DatepickerStartViewExample {\n  startDate = new Date(1990, 0, 1);\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'datepicker-start-view-example',\n  templateUrl: 'datepicker-start-view-example.html',\n  styleUrls: ['datepicker-start-view-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction DatepickerStartViewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nDatepickerStartViewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDatepickerStartViewExample.ctorParameters;\n/** @type {?} */\nDatepickerStartViewExample.prototype.startDate;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Datepicker Touch\n */\nexport class DatepickerTouchExample {\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'datepicker-touch-example',\n  templateUrl: 'datepicker-touch-example.html',\n  styleUrls: ['datepicker-touch-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction DatepickerTouchExample_tsickle_Closure_declarations() {\n/** @type {?} */\nDatepickerTouchExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDatepickerTouchExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\nimport {MdDialog} from '@angular/material';\n/**\n * \\@title Dialog with header, scrollable content and actions\n */\nexport class DialogContentExample {\n/**\n * @param {?} dialog\n */\nconstructor(public dialog: MdDialog) {}\n/**\n * @return {?}\n */\nopenDialog() {\n    const /** @type {?} */ dialogRef = this.dialog.open(DialogContentExampleDialog, {\n      height: '350px'\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      console.log(`Dialog result: ${result}`);\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'dialog-content-example',\n  templateUrl: 'dialog-content-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDialog, },\n];\n}\n\nfunction DialogContentExample_tsickle_Closure_declarations() {\n/** @type {?} */\nDialogContentExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDialogContentExample.ctorParameters;\n/** @type {?} */\nDialogContentExample.prototype.dialog;\n}\n\nexport class DialogContentExampleDialog {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'dialog-content-example-dialog',\n  templateUrl: 'dialog-content-example-dialog.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction DialogContentExampleDialog_tsickle_Closure_declarations() {\n/** @type {?} */\nDialogContentExampleDialog.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDialogContentExampleDialog.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component, Inject} from '@angular/core';\nimport {MdDialog, MD_DIALOG_DATA} from '@angular/material';\n/**\n * \\@title Injecting data when opening a dialog\n */\nexport class DialogDataExample {\n/**\n * @param {?} dialog\n */\nconstructor(public dialog: MdDialog) {}\n/**\n * @return {?}\n */\nopenDialog() {\n    this.dialog.open(DialogDataExampleDialog, {\n      data: {\n        animal: 'panda'\n      }\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'dialog-data-example',\n  templateUrl: 'dialog-data-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDialog, },\n];\n}\n\nfunction DialogDataExample_tsickle_Closure_declarations() {\n/** @type {?} */\nDialogDataExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDialogDataExample.ctorParameters;\n/** @type {?} */\nDialogDataExample.prototype.dialog;\n}\n\nexport class DialogDataExampleDialog {\n/**\n * @param {?} data\n */\nconstructor(\npublic data: any) {}\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'dialog-data-example-dialog',\n  templateUrl: 'dialog-data-example-dialog.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [MD_DIALOG_DATA, ] }, ]},\n];\n}\n\nfunction DialogDataExampleDialog_tsickle_Closure_declarations() {\n/** @type {?} */\nDialogDataExampleDialog.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDialogDataExampleDialog.ctorParameters;\n/** @type {?} */\nDialogDataExampleDialog.prototype.data;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\nimport {MdDialog} from '@angular/material';\n/**\n * \\@title Dialog elements\n */\nexport class DialogElementsExample {\n/**\n * @param {?} dialog\n */\nconstructor(public dialog: MdDialog) { }\n/**\n * @return {?}\n */\nopenDialog() {\n    this.dialog.open(DialogElementsExampleDialog);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'dialog-elements-example',\n  templateUrl: 'dialog-elements-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDialog, },\n];\n}\n\nfunction DialogElementsExample_tsickle_Closure_declarations() {\n/** @type {?} */\nDialogElementsExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDialogElementsExample.ctorParameters;\n/** @type {?} */\nDialogElementsExample.prototype.dialog;\n}\n\nexport class DialogElementsExampleDialog { static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'dialog-elements-example-dialog',\n  templateUrl: 'dialog-elements-example-dialog.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction DialogElementsExampleDialog_tsickle_Closure_declarations() {\n/** @type {?} */\nDialogElementsExampleDialog.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDialogElementsExampleDialog.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component, Inject} from '@angular/core';\nimport {MdDialog, MdDialogRef, MD_DIALOG_DATA} from '@angular/material';\n/**\n * \\@title Dialog Overview\n */\nexport class DialogOverviewExample {\n\n  animal: string;\n  name: string;\n/**\n * @param {?} dialog\n */\nconstructor(public dialog: MdDialog) {}\n/**\n * @return {?}\n */\nopenDialog(): void {\n    let /** @type {?} */ dialogRef = this.dialog.open(DialogOverviewExampleDialog, {\n      width: '250px',\n      data: { name: this.name, animal: this.animal }\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      console.log('The dialog was closed');\n      this.animal = result;\n    });\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'dialog-overview-example',\n  templateUrl: 'dialog-overview-example.html'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDialog, },\n];\n}\n\nfunction DialogOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nDialogOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDialogOverviewExample.ctorParameters;\n/** @type {?} */\nDialogOverviewExample.prototype.animal;\n/** @type {?} */\nDialogOverviewExample.prototype.name;\n/** @type {?} */\nDialogOverviewExample.prototype.dialog;\n}\n\nexport class DialogOverviewExampleDialog {\n/**\n * @param {?} dialogRef\n * @param {?} data\n */\nconstructor(\npublic dialogRef: MdDialogRef<DialogOverviewExampleDialog>,\npublic data: any) { }\n/**\n * @return {?}\n */\nonNoClick(): void {\n    this.dialogRef.close();\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'dialog-overview-example-dialog',\n  templateUrl: 'dialog-overview-example-dialog.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDialogRef, },\n{type: undefined, decorators: [{ type: Inject, args: [MD_DIALOG_DATA, ] }, ]},\n];\n}\n\nfunction DialogOverviewExampleDialog_tsickle_Closure_declarations() {\n/** @type {?} */\nDialogOverviewExampleDialog.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDialogOverviewExampleDialog.ctorParameters;\n/** @type {?} */\nDialogOverviewExampleDialog.prototype.dialogRef;\n/** @type {?} */\nDialogOverviewExampleDialog.prototype.data;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic expansion panel\n */\nexport class ExpansionOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'expansion-overview-example',\n  templateUrl: 'expansion-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ExpansionOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nExpansionOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nExpansionOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Expansion panel as accordion\n */\nexport class ExpansionStepsExample {\n  step = 0;\n/**\n * @param {?} index\n * @return {?}\n */\nsetStep(index: number) {\n    this.step = index;\n  }\n/**\n * @return {?}\n */\nnextStep() {\n    this.step++;\n  }\n/**\n * @return {?}\n */\nprevStep() {\n    this.step--;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'expansion-steps-example',\n  templateUrl: 'expansion-steps-example.html',\n  styleUrls: ['expansion-steps-example.css']\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ExpansionStepsExample_tsickle_Closure_declarations() {\n/** @type {?} */\nExpansionStepsExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nExpansionStepsExample.ctorParameters;\n/** @type {?} */\nExpansionStepsExample.prototype.step;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Dynamic grid-list\n */\nexport class GridListDynamicExample {\n  tiles = [\n    {text: 'One', cols: 3, rows: 1, color: 'lightblue'},\n    {text: 'Two', cols: 1, rows: 2, color: 'lightgreen'},\n    {text: 'Three', cols: 1, rows: 1, color: 'lightpink'},\n    {text: 'Four', cols: 2, rows: 1, color: '#DDBDF1'},\n  ];\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'grid-list-dynamic-example',\n  templateUrl: 'grid-list-dynamic-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction GridListDynamicExample_tsickle_Closure_declarations() {\n/** @type {?} */\nGridListDynamicExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nGridListDynamicExample.ctorParameters;\n/** @type {?} */\nGridListDynamicExample.prototype.tiles;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic grid-list\n */\nexport class GridListOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'grid-list-overview-example',\n  styleUrls: ['grid-list-overview-example.css'],\n  templateUrl: 'grid-list-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction GridListOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nGridListOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nGridListOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic icons\n */\nexport class IconOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'icon-overview-example',\n  templateUrl: 'icon-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction IconOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nIconOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nIconOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\nimport {DomSanitizer} from '@angular/platform-browser';\nimport {MdIconRegistry} from '@angular/material';\n/**\n * \\@title SVG icons\n */\nexport class IconSvgExample {\n/**\n * @param {?} iconRegistry\n * @param {?} sanitizer\n */\nconstructor(iconRegistry: MdIconRegistry, sanitizer: DomSanitizer) {\n    iconRegistry.addSvgIcon(\n        'thumbs-up',\n        sanitizer.bypassSecurityTrustResourceUrl('assets/img/examples/thumbup-icon.svg'));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'icon-svg-example',\n  templateUrl: 'icon-svg-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdIconRegistry, },\n{type: DomSanitizer, },\n];\n}\n\nfunction IconSvgExample_tsickle_Closure_declarations() {\n/** @type {?} */\nIconSvgExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nIconSvgExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Input Clearable\n */\nexport class InputClearableExample {\n  value = 'Clear me';\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'input-clearable-example',\n  templateUrl: './input-clearable-example.html',\n  styleUrls: ['./input-clearable-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction InputClearableExample_tsickle_Closure_declarations() {\n/** @type {?} */\nInputClearableExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nInputClearableExample.ctorParameters;\n/** @type {?} */\nInputClearableExample.prototype.value;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\nimport {FormControl, Validators} from '@angular/forms';\n\nconst /** @type {?} */ EMAIL_REGEX = /^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n/**\n * \\@title Input Errors\n */\nexport class InputErrorsExample {\n\n  emailFormControl = new FormControl('', [\n    Validators.required,\n    Validators.pattern(EMAIL_REGEX)]);\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'input-errors-example',\n  templateUrl: 'input-errors-example.html',\n  styleUrls: ['input-errors-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction InputErrorsExample_tsickle_Closure_declarations() {\n/** @type {?} */\nInputErrorsExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nInputErrorsExample.ctorParameters;\n/** @type {?} */\nInputErrorsExample.prototype.emailFormControl;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Inputs in a form\n */\nexport class InputFormExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'input-form-example',\n  templateUrl: 'input-form-example.html',\n  styleUrls: ['input-form-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction InputFormExample_tsickle_Closure_declarations() {\n/** @type {?} */\nInputFormExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nInputFormExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Input hints\n */\nexport class InputHintExample { static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'input-hint-example',\n  templateUrl: 'input-hint-example.html',\n  styleUrls: ['input-hint-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction InputHintExample_tsickle_Closure_declarations() {\n/** @type {?} */\nInputHintExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nInputHintExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic Inputs\n */\nexport class InputOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'input-overview-example',\n  styleUrls: ['input-overview-example.css'],\n  templateUrl: 'input-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction InputOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nInputOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nInputOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["title","component","ToolbarMultirowExample","additionalFiles","selectorName","toolbar-overview","ToolbarOverviewExample","TableFilteringExample","propDecorators","filter","type","ViewChild","args","COLORS$1","this","dataChange","ExampleDataSource","BehaviorSubject","addUser","Object","defineProperty","ExampleDatabase$1","prototype","copiedData","data","slice","push","createNewUser","name","NAMES$1","Math","round","random","length","charAt","ExampleDataSource$2","connect","displayDataChanges","_exampleDatabase","_filterChange","Observable","merge","apply","map","_this","item","color","toLowerCase","indexOf","disconnect","TableHttpExample","http","ngOnInit","exampleDatabase","ExampleHttpDao","dataSource","ExampleDataSource$3","paginator","sort","selector","styles","template","ctorParameters","Http","requestUrl","href","order","page","get","response","json","resultsLength","isLoadingResults","isRateLimitReached","tslib_1.__extends","_super","mdSortChange","subscribe","pageIndex","getRepoIssues","active","direction","catch","NAMES","TableOverviewExample","displayedColumns","ExampleDatabase$2","selection","SelectionModel","isAllSelected","isEmpty","nativeElement","value","selected","clear","renderedData","forEach","select","id","decorators","MdPaginator","COLORS$2","NAMES$2","i","enumerable","configurable","next","toString","progress","ExampleDataSource$4","call","filteredData","_paginator","set","_sort","startIndex","pageSize","sortData","a","b","propertyA","_a","propertyB","_c","isNaN","_b","_d","DataSource","TablePaginationExample","ExampleDatabase$3","Component","COLORS$3","NAMES$3","ExampleDataSource$5","splice","TableSortingExample","ExampleDataSource$6","MdSort","COLORS$4","ExampleDatabase$4","getSortedData","TabsOverviewExample","TabsTemplateLabelExample","TooltipOverviewExample","TooltipPositionExample","position","EXAMPLE_COMPONENTS","autocomplete-display","AutocompleteDisplayExample","autocomplete-filter","AutocompleteFilterExample","autocomplete-overview","AutocompleteOverviewExample","autocomplete-simple","AutocompleteSimpleExample","button-overview","ButtonOverviewExample","button-toggle-exclusive","ButtonToggleExclusiveExample","button-toggle-overview","ButtonToggleOverviewExample","button-types","ButtonTypesExample","card-fancy","CardFancyExample","card-overview","CardOverviewExample","cdk-table-basic","CdkTableBasicExample","checkbox-configurable","CheckboxConfigurableExample","checkbox-overview","CheckboxOverviewExample","chips-overview","ChipsOverviewExample","chips-stacked","ChipsStackedExample","datepicker-api","DatepickerApiExample","datepicker-filter","DatepickerFilterExample","datepicker-min-max","DatepickerMinMaxExample","datepicker-overview","DatepickerOverviewExample","datepicker-start-view","DatepickerStartViewExample","datepicker-touch","DatepickerTouchExample","dialog-content","DialogContentExample","dialog-data","DialogDataExample","dialog-elements","DialogElementsExample","dialog-overview","DialogOverviewExample","expansion-overview","ExpansionOverviewExample","expansion-steps","ExpansionStepsExample","grid-list-dynamic","GridListDynamicExample","grid-list-overview","GridListOverviewExample","icon-overview","IconOverviewExample","icon-svg","IconSvgExample","input-clearable","InputClearableExample","input-errors","InputErrorsExample","input-form","InputFormExample","input-hint","InputHintExample","input-overview","InputOverviewExample","input-prefix-suffix","InputPrefixSuffixExample","list-overview","ListOverviewExample","list-sections","ListSectionsExample","list-selection","ListSelectionExample","menu-icons","MenuIconsExample","menu-overview","MenuOverviewExample","nested-menu","NestedMenuExample","paginator-configurable","PaginatorConfigurableExample","paginator-overview","PaginatorOverviewExample","progress-bar-configurable","ProgressBarConfigurableExample","progress-bar-overview","ProgressBarOverviewExample","progress-spinner-configurable","ProgressSpinnerConfigurableExample","progress-spinner-overview","ProgressSpinnerOverviewExample","radio-ng-model","RadioNgModelExample","radio-overview","RadioOverviewExample","select-form","SelectFormExample","select-overview","SelectOverviewExample","sidenav-fab","SidenavFabExample","sidenav-overview","SidenavOverviewExample","slide-toggle-configurable","SlideToggleConfigurableExample","slide-toggle-forms","SlideToggleFormsExample","slide-toggle-overview","SlideToggleOverviewExample","slider-configurable","SliderConfigurableExample","slider-overview","SliderOverviewExample","snack-bar-component","SnackBarComponentExample","snack-bar-overview","SnackBarOverviewExample","sort-overview","SortOverviewExample","stepper-overview","StepperOverviewExample","table-basic","TableBasicExample","table-overview","tabs-overview","tabs-template-label","toolbar-multirow","folders","updated","Date","notes","pageSizeOptions","setPageSizeOptionsInput","split","str","mode","bufferValue","seasons","viewValue","foods","checked","disabled","formBuilder","isChecked","formGroup","group","enableWifi","acceptTerms","Validators","requiredTrue","FormBuilder","max","min","showTicks","step","vertical","_tickInterval","v","encapsulation","ViewEncapsulation","None","openSnackBar","snackBar","openFromComponent","PizzaPartyComponent","duration","MdSnackBar","open","message","action","desserts","calories","fat","carbs","protein","sortedData","isAsc","compare","_formBuilder","isLinear","firstFormGroup","ExampleDatabase","firstCtrl","required","ExampleDataSource$1","weight","symbol","arguments","of","__extends","d","__","constructor","extendStatics","create","setPrototypeOf","__proto__","Array","p","hasOwnProperty","ExampleMaterialModule","NgModule","exports","CdkTableModule","MdAutocompleteModule","MdButtonModule","MdButtonToggleModule","MdCardModule","MdCheckboxModule","MdChipsModule","MdDatepickerModule","MdDialogModule","MdExpansionModule","MdFormFieldModule","MdGridListModule","MdIconModule","MdInputModule","MdListModule","MdMenuModule","MdProgressBarModule","MdProgressSpinnerModule","MdRadioModule","MdSelectModule","MdSlideToggleModule","MdSliderModule","MdSidenavModule","MdSnackBarModule","MdStepperModule","MdTabsModule","MdToolbarModule","MdTooltipModule","MdPaginatorModule","MdSortModule","MdTableModule","User","myControl","FormControl","options","filteredOptions","valueChanges","displayFn","user","val","option","states","population","flag","state","filterStates","COLORS","indeterminate","align","availableColors","myFilter","day","getDay","maxDate","dialog","DialogContentExampleDialog","console","log","result","MdDialog","openDialog","DialogDataExampleDialog","DialogElementsExampleDialog","afterClosed","animal","DialogOverviewExampleDialog","dialogRef","onNoClick","close","undefined","Inject","MD_DIALOG_DATA","prevStep","text","cols","rows","iconRegistry","sanitizer","addSvgIcon","bypassSecurityTrustResourceUrl","DomSanitizer","EMAIL_REGEX"],"mappings":"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"}