{"version":3,"file":"material-examples.umd.min.js","sources":["../../src/material-examples/table-overview/table-overview-example.ts","../../src/material-examples/table-pagination/table-pagination-example.ts","../../src/material-examples/table-sorting/table-sorting-example.ts","../../src/material-examples/tabs-overview/tabs-overview-example.ts","../../src/material-examples/tabs-template-label/tabs-template-label-example.ts","../../src/material-examples/toolbar-multirow/toolbar-multirow-example.ts","../../src/material-examples/tooltip-overview/tooltip-overview-example.ts","../../src/material-examples/toolbar-overview/toolbar-overview-example.ts","../../src/material-examples/tooltip-position/tooltip-position-example.ts","../../src/material-examples/example-module.ts","../../src/material-examples/example-data.ts","../../src/material-examples/index.ts","../../src/material-examples/radio-ng-model/radio-ng-model-example.ts","../../src/material-examples/radio-overview/radio-overview-example.ts","../../src/material-examples/select-form/select-form-example.ts","../../src/material-examples/select-overview/select-overview-example.ts","../../src/material-examples/sidenav-fab/sidenav-fab-example.ts","../../src/material-examples/sidenav-overview/sidenav-overview-example.ts","../../src/material-examples/slide-toggle-configurable/slide-toggle-configurable-example.ts","../../src/material-examples/slide-toggle-forms/slide-toggle-forms-example.ts","../../src/material-examples/slide-toggle-overview/slide-toggle-overview-example.ts","../../src/material-examples/slider-configurable/slider-configurable-example.ts","../../src/material-examples/slider-overview/slider-overview-example.ts","../../src/material-examples/snack-bar-component/snack-bar-component-example.ts","../../src/material-examples/snack-bar-overview/snack-bar-overview-example.ts","../../src/material-examples/sort-overview/sort-overview-example.ts","../../src/material-examples/table-basic/table-basic-example.ts","../../src/material-examples/table-http/table-http-example.ts","../../src/material-examples/table-filtering/table-filtering-example.ts","../../node_modules/tslib/tslib.es6.js","../../src/material-examples/material-module.ts","../../src/material-examples/autocomplete-overview/autocomplete-overview-example.ts","../../src/material-examples/button-overview/button-overview-example.ts","../../src/material-examples/button-toggle-exclusive/button-toggle-exclusive-example.ts","../../src/material-examples/button-toggle-overview/button-toggle-overview-example.ts","../../src/material-examples/button-types/button-types-example.ts","../../src/material-examples/card-fancy/card-fancy-example.ts","../../src/material-examples/card-overview/card-overview-example.ts","../../src/material-examples/cdk-table-basic/cdk-table-basic-example.ts","../../src/material-examples/checkbox-configurable/checkbox-configurable-example.ts","../../src/material-examples/checkbox-overview/checkbox-overview-example.ts","../../src/material-examples/chips-overview/chips-overview-example.ts","../../src/material-examples/chips-stacked/chips-stacked-example.ts","../../src/material-examples/datepicker-api/datepicker-api-example.ts","../../src/material-examples/datepicker-filter/datepicker-filter-example.ts","../../src/material-examples/datepicker-min-max/datepicker-min-max-example.ts","../../src/material-examples/datepicker-overview/datepicker-overview-example.ts","../../src/material-examples/datepicker-start-view/datepicker-start-view-example.ts","../../src/material-examples/datepicker-touch/datepicker-touch-example.ts","../../src/material-examples/dialog-content/dialog-content-example.ts","../../src/material-examples/dialog-data/dialog-data-example.ts","../../src/material-examples/dialog-elements/dialog-elements-example.ts","../../src/material-examples/dialog-overview/dialog-overview-example.ts","../../src/material-examples/grid-list-dynamic/grid-list-dynamic-example.ts","../../src/material-examples/grid-list-overview/grid-list-overview-example.ts","../../src/material-examples/icon-overview/icon-overview-example.ts","../../src/material-examples/icon-svg-example/icon-svg-example.ts","../../src/material-examples/input-clearable/input-clearable-example.ts","../../src/material-examples/input-errors/input-errors-example.ts","../../src/material-examples/input-form/input-form-example.ts","../../src/material-examples/input-hint/input-hint-example.ts","../../src/material-examples/input-overview/input-overview-example.ts","../../src/material-examples/input-prefix-suffix/input-prefix-suffix-example.ts","../../src/material-examples/list-overview/list-overview-example.ts","../../src/material-examples/list-sections/list-sections-example.ts","../../src/material-examples/menu-icons/menu-icons-example.ts","../../src/material-examples/menu-overview/menu-overview-example.ts","../../src/material-examples/paginator-configurable/paginator-configurable-example.ts","../../src/material-examples/paginator-overview/paginator-overview-example.ts","../../src/material-examples/progress-bar-configurable/progress-bar-configurable-example.ts","../../src/material-examples/progress-bar-overview/progress-bar-overview-example.ts","../../src/material-examples/progress-spinner-configurable/progress-spinner-configurable-example.ts","../../src/material-examples/progress-spinner-overview/progress-spinner-overview-example.ts"],"sourcesContent":["import {Component, ElementRef, ViewChild} from '@angular/core';\nimport {DataSource} from '@angular/cdk';\nimport {MdPaginator, MdSort, SelectionModel} from '@angular/material';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {Observable} from 'rxjs/Observable';\nimport'rxjs/add/operator/startWith';\nimport'rxjs/add/observable/merge';\nimport'rxjs/add/observable/fromEvent';\nimport'rxjs/add/operator/map';\nimport'rxjs/add/operator/distinctUntilChanged';\nimport'rxjs/add/operator/debounceTime';\n/**\n * \\@title Feature-rich data table\n */\nexport class TableOverviewExample {\n  displayedColumns = ['select', 'userId', 'userName', 'progress', 'color'];\n  exampleDatabase = new ExampleDatabase();\n  selection = new SelectionModel<string>(true, []);\n  dataSource: ExampleDataSource | null;\n\n   paginator: MdPaginator;\n   sort: MdSort;\n   filter: ElementRef;\n/**\n * @return {?}\n */\nngOnInit() {\n    this.dataSource = new ExampleDataSource(this.exampleDatabase, this.paginator, this.sort);\n    Observable.fromEvent(this.filter.nativeElement, 'keyup')\n        .debounceTime(150)\n        .distinctUntilChanged()\n        .subscribe(() => {\n          if (!this.dataSource) { return; }\n          this.dataSource.filter = this.filter.nativeElement.value;\n        });\n  }\n/**\n * @return {?}\n */\nisAllSelected(): boolean {\n    if (!this.dataSource) { return false; }\n    if (this.selection.isEmpty()) { return false; }\n\n    if (this.filter.nativeElement.value) {\n      return this.selection.selected.length == this.dataSource.renderedData.length;\n    } else {\n      return this.selection.selected.length == this.exampleDatabase.data.length;\n    }\n  }\n/**\n * @return {?}\n */\nmasterToggle() {\n    if (!this.dataSource) { return; }\n\n    if (this.isAllSelected()) {\n      this.selection.clear();\n    } else if (this.filter.nativeElement.value) {\n      this.dataSource.renderedData.forEach(data => this.selection.select(data.id));\n    } else {\n      this.exampleDatabase.data.forEach(data => this.selection.select(data.id));\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'table-overview-example',\n  styleUrls: ['table-overview-example.css'],\n  templateUrl: 'table-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'paginator': [{ type: ViewChild, args: [MdPaginator, ] },],\n'sort': [{ type: ViewChild, args: [MdSort, ] },],\n'filter': [{ type: ViewChild, args: ['filter', ] },],\n};\n}\n\nfunction TableOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nTableOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTableOverviewExample.ctorParameters;\n/** @type {?} */\nTableOverviewExample.propDecorators;\n/** @type {?} */\nTableOverviewExample.prototype.displayedColumns;\n/** @type {?} */\nTableOverviewExample.prototype.exampleDatabase;\n/** @type {?} */\nTableOverviewExample.prototype.selection;\n/** @type {?} */\nTableOverviewExample.prototype.dataSource;\n/** @type {?} */\nTableOverviewExample.prototype.paginator;\n/** @type {?} */\nTableOverviewExample.prototype.sort;\n/** @type {?} */\nTableOverviewExample.prototype.filter;\n}\n\n/**\n * Constants used to fill up our data base.\n */\nconst COLORS = ['maroon', 'red', 'orange', 'yellow', 'olive', 'green', 'purple',\n  'fuchsia', 'lime', 'teal', 'aqua', 'blue', 'navy', 'black', 'gray'];\nconst /** @type {?} */ NAMES = ['Maia', 'Asher', 'Olivia', 'Atticus', 'Amelia', 'Jack',\n  'Charlotte', 'Theodore', 'Isla', 'Oliver', 'Isabella', 'Jasper',\n  'Cora', 'Levi', 'Violet', 'Arthur', 'Mia', 'Thomas', 'Elizabeth'];\n\nexport interface UserData {\n  id: string;\n  name: string;\n  progress: string;\n  color: string;\n}\n/**\n * An example database that the data source uses to retrieve data for the table.\n */\nexport class ExampleDatabase {\n/**\n * Stream that emits whenever the data has been modified.\n */\ndataChange: BehaviorSubject<UserData[]> = new BehaviorSubject<UserData[]>([]);\n/**\n * @return {?}\n */\nget data(): UserData[] { return this.dataChange.value; }\nconstructor() {\n    // Fill up the database with 100 users.\n    for (let i = 0; i < 100; i++) { this.addUser(); }\n  }\n/**\n * Adds a new user to the database.\n * @return {?}\n */\naddUser() {\n    const /** @type {?} */ copiedData = this.data.slice();\n    copiedData.push(this.createNewUser());\n    this.dataChange.next(copiedData);\n  }\n/**\n * Builds and returns a new User.\n * @return {?}\n */\nprivate createNewUser() {\n    const /** @type {?} */ name =\n        NAMES[Math.round(Math.random() * (NAMES.length - 1))] + ' ' +\n        NAMES[Math.round(Math.random() * (NAMES.length - 1))].charAt(0) + '.';\n\n    return {\n      id: (this.data.length + 1).toString(),\n      name: name,\n      progress: Math.round(Math.random() * 100).toString(),\n      color: COLORS[Math.round(Math.random() * (COLORS.length - 1))]\n    };\n  }\n}\n\nfunction ExampleDatabase_tsickle_Closure_declarations() {\n/**\n * Stream that emits whenever the data has been modified.\n * @type {?}\n */\nExampleDatabase.prototype.dataChange;\n}\n\n/**\n * Data source to provide what data should be rendered in the table. Note that the data source\n * can retrieve its data in any way. In this case, the data source is provided a reference\n * to a common data base, ExampleDatabase. It is not the data source's responsibility to manage\n * the underlying data. Instead, it only needs to take the data and send the table exactly what\n * should be rendered.\n */\nexport class ExampleDataSource extends DataSource<any> {\n  _filterChange = new BehaviorSubject('');\n/**\n * @return {?}\n */\nget filter(): string { return this._filterChange.value; }\n/**\n * @param {?} filter\n * @return {?}\n */\nset filter(filter: string) { this._filterChange.next(filter); }\n\n  filteredData: UserData[] = [];\n  renderedData: UserData[] = [];\n/**\n * @param {?} _exampleDatabase\n * @param {?} _paginator\n * @param {?} _sort\n */\nconstructor(private _exampleDatabase: ExampleDatabase,\nprivate _paginator: MdPaginator,\nprivate _sort: MdSort) {\n    super();\n  }\n/**\n * Connect function called by the table to retrieve one stream containing the data to render.\n * @return {?}\n */\nconnect(): Observable<UserData[]> {\n    // Listen for any changes in the base data, sorting, filtering, or pagination\n    const /** @type {?} */ displayDataChanges = [\n      this._exampleDatabase.dataChange,\n      this._sort.mdSortChange,\n      this._filterChange,\n      this._paginator.page,\n    ];\n\n    return Observable.merge(...displayDataChanges).map(() => {\n      // Filter data\n      this.filteredData = this._exampleDatabase.data.slice().filter((item: UserData) => {\n        let /** @type {?} */ searchStr = (item.name + item.color).toLowerCase();\n        return searchStr.indexOf(this.filter.toLowerCase()) != -1;\n      });\n\n      // Sort filtered data\n      const /** @type {?} */ sortedData = this.sortData(this.filteredData.slice());\n\n      // Grab the page's slice of the filtered sorted data.\n      const /** @type {?} */ startIndex = this._paginator.pageIndex * this._paginator.pageSize;\n      this.renderedData = sortedData.splice(startIndex, this._paginator.pageSize);\n      return this.renderedData;\n    });\n  }\n/**\n * @return {?}\n */\ndisconnect() {}\n/**\n * Returns a sorted copy of the database data.\n * @param {?} data\n * @return {?}\n */\nsortData(data: UserData[]): UserData[] {\n    if (!this._sort.active || this._sort.direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let /** @type {?} */ propertyA: number|string = '';\n      let /** @type {?} */ propertyB: number|string = '';\n\n      switch (this._sort.active) {\n        case 'userId': [propertyA, propertyB] = [a.id, b.id]; break;\n        case 'userName': [propertyA, propertyB] = [a.name, b.name]; break;\n        case 'progress': [propertyA, propertyB] = [a.progress, b.progress]; break;\n        case 'color': [propertyA, propertyB] = [a.color, b.color]; break;\n      }\n\n      let /** @type {?} */ valueA = isNaN(+propertyA) ? propertyA : +propertyA;\n      let /** @type {?} */ valueB = isNaN(+propertyB) ? propertyB : +propertyB;\n\n      return (valueA < valueB ? -1 : 1) * (this._sort.direction == 'asc' ? 1 : -1);\n    });\n  }\n}\n\nfunction ExampleDataSource_tsickle_Closure_declarations() {\n/** @type {?} */\nExampleDataSource.prototype._filterChange;\n/** @type {?} */\nExampleDataSource.prototype.filteredData;\n/** @type {?} */\nExampleDataSource.prototype.renderedData;\n/** @type {?} */\nExampleDataSource.prototype._exampleDatabase;\n/** @type {?} */\nExampleDataSource.prototype._paginator;\n/** @type {?} */\nExampleDataSource.prototype._sort;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component, ViewChild} from '@angular/core';\nimport {DataSource} from '@angular/cdk';\nimport {MdPaginator} from '@angular/material';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {Observable} from 'rxjs/Observable';\nimport'rxjs/add/operator/startWith';\nimport'rxjs/add/observable/merge';\nimport'rxjs/add/operator/map';\n/**\n * \\@title Table with pagination\n */\nexport class TablePaginationExample {\n  displayedColumns = ['userId', 'userName', 'progress', 'color'];\n  exampleDatabase = new ExampleDatabase();\n  dataSource: ExampleDataSource | null;\n\n   paginator: MdPaginator;\n/**\n * @return {?}\n */\nngOnInit() {\n    this.dataSource = new ExampleDataSource(this.exampleDatabase, this.paginator);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'table-pagination-example',\n  styleUrls: ['table-pagination-example.css'],\n  templateUrl: 'table-pagination-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'paginator': [{ type: ViewChild, args: [MdPaginator, ] },],\n};\n}\n\nfunction TablePaginationExample_tsickle_Closure_declarations() {\n/** @type {?} */\nTablePaginationExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTablePaginationExample.ctorParameters;\n/** @type {?} */\nTablePaginationExample.propDecorators;\n/** @type {?} */\nTablePaginationExample.prototype.displayedColumns;\n/** @type {?} */\nTablePaginationExample.prototype.exampleDatabase;\n/** @type {?} */\nTablePaginationExample.prototype.dataSource;\n/** @type {?} */\nTablePaginationExample.prototype.paginator;\n}\n\n/**\n * Constants used to fill up our data base.\n */\nconst COLORS = ['maroon', 'red', 'orange', 'yellow', 'olive', 'green', 'purple',\n  'fuchsia', 'lime', 'teal', 'aqua', 'blue', 'navy', 'black', 'gray'];\nconst /** @type {?} */ NAMES = ['Maia', 'Asher', 'Olivia', 'Atticus', 'Amelia', 'Jack',\n  'Charlotte', 'Theodore', 'Isla', 'Oliver', 'Isabella', 'Jasper',\n  'Cora', 'Levi', 'Violet', 'Arthur', 'Mia', 'Thomas', 'Elizabeth'];\n\nexport interface UserData {\n  id: string;\n  name: string;\n  progress: string;\n  color: string;\n}\n/**\n * An example database that the data source uses to retrieve data for the table.\n */\nexport class ExampleDatabase {\n/**\n * Stream that emits whenever the data has been modified.\n */\ndataChange: BehaviorSubject<UserData[]> = new BehaviorSubject<UserData[]>([]);\n/**\n * @return {?}\n */\nget data(): UserData[] { return this.dataChange.value; }\nconstructor() {\n    // Fill up the database with 100 users.\n    for (let i = 0; i < 100; i++) { this.addUser(); }\n  }\n/**\n * Adds a new user to the database.\n * @return {?}\n */\naddUser() {\n    const /** @type {?} */ copiedData = this.data.slice();\n    copiedData.push(this.createNewUser());\n    this.dataChange.next(copiedData);\n  }\n/**\n * Builds and returns a new User.\n * @return {?}\n */\nprivate createNewUser() {\n    const /** @type {?} */ name =\n        NAMES[Math.round(Math.random() * (NAMES.length - 1))] + ' ' +\n        NAMES[Math.round(Math.random() * (NAMES.length - 1))].charAt(0) + '.';\n\n    return {\n      id: (this.data.length + 1).toString(),\n      name: name,\n      progress: Math.round(Math.random() * 100).toString(),\n      color: COLORS[Math.round(Math.random() * (COLORS.length - 1))]\n    };\n  }\n}\n\nfunction ExampleDatabase_tsickle_Closure_declarations() {\n/**\n * Stream that emits whenever the data has been modified.\n * @type {?}\n */\nExampleDatabase.prototype.dataChange;\n}\n\n/**\n * Data source to provide what data should be rendered in the table. Note that the data source\n * can retrieve its data in any way. In this case, the data source is provided a reference\n * to a common data base, ExampleDatabase. It is not the data source's responsibility to manage\n * the underlying data. Instead, it only needs to take the data and send the table exactly what\n * should be rendered.\n */\nexport class ExampleDataSource extends DataSource<any> {\n/**\n * @param {?} _exampleDatabase\n * @param {?} _paginator\n */\nconstructor(private _exampleDatabase: ExampleDatabase,\nprivate _paginator: MdPaginator) {\n    super();\n  }\n/**\n * Connect function called by the table to retrieve one stream containing the data to render.\n * @return {?}\n */\nconnect(): Observable<UserData[]> {\n    const /** @type {?} */ displayDataChanges = [\n      this._exampleDatabase.dataChange,\n      this._paginator.page,\n    ];\n\n    return Observable.merge(...displayDataChanges).map(() => {\n      const /** @type {?} */ data = this._exampleDatabase.data.slice();\n\n      // Grab the page's slice of data.\n      const /** @type {?} */ startIndex = this._paginator.pageIndex * this._paginator.pageSize;\n      return data.splice(startIndex, this._paginator.pageSize);\n    });\n  }\n/**\n * @return {?}\n */\ndisconnect() {}\n}\n\nfunction ExampleDataSource_tsickle_Closure_declarations() {\n/** @type {?} */\nExampleDataSource.prototype._exampleDatabase;\n/** @type {?} */\nExampleDataSource.prototype._paginator;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component, ViewChild} from '@angular/core';\nimport {DataSource} from '@angular/cdk';\nimport {MdSort} from '@angular/material';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {Observable} from 'rxjs/Observable';\nimport'rxjs/add/operator/startWith';\nimport'rxjs/add/observable/merge';\nimport'rxjs/add/operator/map';\n/**\n * \\@title Table with sorting\n */\nexport class TableSortingExample {\n  displayedColumns = ['userId', 'userName', 'progress', 'color'];\n  exampleDatabase = new ExampleDatabase();\n  dataSource: ExampleDataSource | null;\n\n   sort: MdSort;\n/**\n * @return {?}\n */\nngOnInit() {\n    this.dataSource = new ExampleDataSource(this.exampleDatabase, this.sort);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'table-sorting-example',\n  styleUrls: ['table-sorting-example.css'],\n  templateUrl: 'table-sorting-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'sort': [{ type: ViewChild, args: [MdSort, ] },],\n};\n}\n\nfunction TableSortingExample_tsickle_Closure_declarations() {\n/** @type {?} */\nTableSortingExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTableSortingExample.ctorParameters;\n/** @type {?} */\nTableSortingExample.propDecorators;\n/** @type {?} */\nTableSortingExample.prototype.displayedColumns;\n/** @type {?} */\nTableSortingExample.prototype.exampleDatabase;\n/** @type {?} */\nTableSortingExample.prototype.dataSource;\n/** @type {?} */\nTableSortingExample.prototype.sort;\n}\n\n/**\n * Constants used to fill up our data base.\n */\nconst COLORS = ['maroon', 'red', 'orange', 'yellow', 'olive', 'green', 'purple',\n  'fuchsia', 'lime', 'teal', 'aqua', 'blue', 'navy', 'black', 'gray'];\nconst /** @type {?} */ NAMES = ['Maia', 'Asher', 'Olivia', 'Atticus', 'Amelia', 'Jack',\n  'Charlotte', 'Theodore', 'Isla', 'Oliver', 'Isabella', 'Jasper',\n  'Cora', 'Levi', 'Violet', 'Arthur', 'Mia', 'Thomas', 'Elizabeth'];\n\nexport interface UserData {\n  id: string;\n  name: string;\n  progress: string;\n  color: string;\n}\n/**\n * An example database that the data source uses to retrieve data for the table.\n */\nexport class ExampleDatabase {\n/**\n * Stream that emits whenever the data has been modified.\n */\ndataChange: BehaviorSubject<UserData[]> = new BehaviorSubject<UserData[]>([]);\n/**\n * @return {?}\n */\nget data(): UserData[] { return this.dataChange.value; }\nconstructor() {\n    // Fill up the database with 100 users.\n    for (let i = 0; i < 100; i++) { this.addUser(); }\n  }\n/**\n * Adds a new user to the database.\n * @return {?}\n */\naddUser() {\n    const /** @type {?} */ copiedData = this.data.slice();\n    copiedData.push(this.createNewUser());\n    this.dataChange.next(copiedData);\n  }\n/**\n * Builds and returns a new User.\n * @return {?}\n */\nprivate createNewUser() {\n    const /** @type {?} */ name =\n        NAMES[Math.round(Math.random() * (NAMES.length - 1))] + ' ' +\n        NAMES[Math.round(Math.random() * (NAMES.length - 1))].charAt(0) + '.';\n\n    return {\n      id: (this.data.length + 1).toString(),\n      name: name,\n      progress: Math.round(Math.random() * 100).toString(),\n      color: COLORS[Math.round(Math.random() * (COLORS.length - 1))]\n    };\n  }\n}\n\nfunction ExampleDatabase_tsickle_Closure_declarations() {\n/**\n * Stream that emits whenever the data has been modified.\n * @type {?}\n */\nExampleDatabase.prototype.dataChange;\n}\n\n/**\n * Data source to provide what data should be rendered in the table. Note that the data source\n * can retrieve its data in any way. In this case, the data source is provided a reference\n * to a common data base, ExampleDatabase. It is not the data source's responsibility to manage\n * the underlying data. Instead, it only needs to take the data and send the table exactly what\n * should be rendered.\n */\nexport class ExampleDataSource extends DataSource<any> {\n/**\n * @param {?} _exampleDatabase\n * @param {?} _sort\n */\nconstructor(private _exampleDatabase: ExampleDatabase,\nprivate _sort: MdSort) {\n    super();\n  }\n/**\n * Connect function called by the table to retrieve one stream containing the data to render.\n * @return {?}\n */\nconnect(): Observable<UserData[]> {\n    const /** @type {?} */ displayDataChanges = [\n      this._exampleDatabase.dataChange,\n      this._sort.mdSortChange,\n    ];\n\n    return Observable.merge(...displayDataChanges).map(() => {\n      return this.getSortedData();\n    });\n  }\n/**\n * @return {?}\n */\ndisconnect() {}\n/**\n * Returns a sorted copy of the database data.\n * @return {?}\n */\ngetSortedData(): UserData[] {\n    const /** @type {?} */ data = this._exampleDatabase.data.slice();\n    if (!this._sort.active || this._sort.direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let /** @type {?} */ propertyA: number|string = '';\n      let /** @type {?} */ propertyB: number|string = '';\n\n      switch (this._sort.active) {\n        case 'userId': [propertyA, propertyB] = [a.id, b.id]; break;\n        case 'userName': [propertyA, propertyB] = [a.name, b.name]; break;\n        case 'progress': [propertyA, propertyB] = [a.progress, b.progress]; break;\n        case 'color': [propertyA, propertyB] = [a.color, b.color]; break;\n      }\n\n      let /** @type {?} */ valueA = isNaN(+propertyA) ? propertyA : +propertyA;\n      let /** @type {?} */ valueB = isNaN(+propertyB) ? propertyB : +propertyB;\n\n      return (valueA < valueB ? -1 : 1) * (this._sort.direction == 'asc' ? 1 : -1);\n    });\n  }\n}\n\nfunction ExampleDataSource_tsickle_Closure_declarations() {\n/** @type {?} */\nExampleDataSource.prototype._exampleDatabase;\n/** @type {?} */\nExampleDataSource.prototype._sort;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic tabs\n */\nexport class TabsOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'tabs-overview-example',\n  templateUrl: 'tabs-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction TabsOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nTabsOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTabsOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Coming soon!\n */\nexport class TabsTemplateLabelExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'tabs-template-label-example',\n  templateUrl: 'tabs-template-label-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction TabsTemplateLabelExample_tsickle_Closure_declarations() {\n/** @type {?} */\nTabsTemplateLabelExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTabsTemplateLabelExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Multi-row toolbar\n */\nexport class ToolbarMultirowExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'toolbar-multirow-example',\n  templateUrl: 'toolbar-multirow-example.html',\n  styleUrls: ['toolbar-multirow-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ToolbarMultirowExample_tsickle_Closure_declarations() {\n/** @type {?} */\nToolbarMultirowExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nToolbarMultirowExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic tooltip\n */\nexport class TooltipOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'tooltip-overview-example',\n  templateUrl: 'tooltip-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction TooltipOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nTooltipOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTooltipOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic toolbar\n */\nexport class ToolbarOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'toolbar-overview-example',\n  templateUrl: 'toolbar-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ToolbarOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nToolbarOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nToolbarOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Tooltip with custom position\n */\nexport class TooltipPositionExample {\n  position = 'before';\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'tooltip-position-example',\n  templateUrl: 'tooltip-position-example.html',\n  styleUrls: ['tooltip-position-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction TooltipPositionExample_tsickle_Closure_declarations() {\n/** @type {?} */\nTooltipPositionExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTooltipPositionExample.ctorParameters;\n/** @type {?} */\nTooltipPositionExample.prototype.position;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/* tslint:disable */\n/** DO NOT MANUALLY EDIT THIS FILE, IT IS GENERATED VIA GULP 'build-examples-module' */\n\nimport {NgModule} from '@angular/core';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {CommonModule} from '@angular/common';\nimport {ExampleMaterialModule} from './material-module';\n\nexport interface LiveExample {\n  title: string;\n  component: any;\n  additionalFiles?: string[];\n  selectorName?: string;\n}\n\nimport {AutocompleteOverviewExample} from './autocomplete-overview/autocomplete-overview-example';\nimport {ButtonOverviewExample} from './button-overview/button-overview-example';\nimport {ButtonToggleExclusiveExample} from './button-toggle-exclusive/button-toggle-exclusive-example';\nimport {ButtonToggleOverviewExample} from './button-toggle-overview/button-toggle-overview-example';\nimport {ButtonTypesExample} from './button-types/button-types-example';\nimport {CardFancyExample} from './card-fancy/card-fancy-example';\nimport {CardOverviewExample} from './card-overview/card-overview-example';\nimport {CdkTableBasicExample} from './cdk-table-basic/cdk-table-basic-example';\nimport {CheckboxConfigurableExample} from './checkbox-configurable/checkbox-configurable-example';\nimport {CheckboxOverviewExample} from './checkbox-overview/checkbox-overview-example';\nimport {ChipsOverviewExample} from './chips-overview/chips-overview-example';\nimport {ChipsStackedExample} from './chips-stacked/chips-stacked-example';\nimport {DatepickerApiExample} from './datepicker-api/datepicker-api-example';\nimport {DatepickerFilterExample} from './datepicker-filter/datepicker-filter-example';\nimport {DatepickerMinMaxExample} from './datepicker-min-max/datepicker-min-max-example';\nimport {DatepickerOverviewExample} from './datepicker-overview/datepicker-overview-example';\nimport {DatepickerStartViewExample} from './datepicker-start-view/datepicker-start-view-example';\nimport {DatepickerTouchExample} from './datepicker-touch/datepicker-touch-example';\nimport {DialogContentExampleDialog,DialogContentExample} from './dialog-content/dialog-content-example';\nimport {DialogDataExampleDialog,DialogDataExample} from './dialog-data/dialog-data-example';\nimport {DialogElementsExampleDialog,DialogElementsExample} from './dialog-elements/dialog-elements-example';\nimport {DialogOverviewExampleDialog,DialogOverviewExample} from './dialog-overview/dialog-overview-example';\nimport {GridListDynamicExample} from './grid-list-dynamic/grid-list-dynamic-example';\nimport {GridListOverviewExample} from './grid-list-overview/grid-list-overview-example';\nimport {IconOverviewExample} from './icon-overview/icon-overview-example';\nimport {IconSvgExample} from './icon-svg-example/icon-svg-example';\nimport {InputClearableExample} from './input-clearable/input-clearable-example';\nimport {InputErrorsExample} from './input-errors/input-errors-example';\nimport {InputFormExample} from './input-form/input-form-example';\nimport {InputHintExample} from './input-hint/input-hint-example';\nimport {InputOverviewExample} from './input-overview/input-overview-example';\nimport {InputPrefixSuffixExample} from './input-prefix-suffix/input-prefix-suffix-example';\nimport {ListOverviewExample} from './list-overview/list-overview-example';\nimport {ListSectionsExample} from './list-sections/list-sections-example';\nimport {MenuIconsExample} from './menu-icons/menu-icons-example';\nimport {MenuOverviewExample} from './menu-overview/menu-overview-example';\nimport {PaginatorConfigurableExample} from './paginator-configurable/paginator-configurable-example';\nimport {PaginatorOverviewExample} from './paginator-overview/paginator-overview-example';\nimport {ProgressBarConfigurableExample} from './progress-bar-configurable/progress-bar-configurable-example';\nimport {ProgressBarOverviewExample} from './progress-bar-overview/progress-bar-overview-example';\nimport {ProgressSpinnerConfigurableExample} from './progress-spinner-configurable/progress-spinner-configurable-example';\nimport {ProgressSpinnerOverviewExample} from './progress-spinner-overview/progress-spinner-overview-example';\nimport {RadioNgModelExample} from './radio-ng-model/radio-ng-model-example';\nimport {RadioOverviewExample} from './radio-overview/radio-overview-example';\nimport {SelectFormExample} from './select-form/select-form-example';\nimport {SelectOverviewExample} from './select-overview/select-overview-example';\nimport {SidenavFabExample} from './sidenav-fab/sidenav-fab-example';\nimport {SidenavOverviewExample} from './sidenav-overview/sidenav-overview-example';\nimport {SlideToggleConfigurableExample} from './slide-toggle-configurable/slide-toggle-configurable-example';\nimport {SlideToggleFormsExample} from './slide-toggle-forms/slide-toggle-forms-example';\nimport {SlideToggleOverviewExample} from './slide-toggle-overview/slide-toggle-overview-example';\nimport {SliderConfigurableExample} from './slider-configurable/slider-configurable-example';\nimport {SliderOverviewExample} from './slider-overview/slider-overview-example';\nimport {PizzaPartyComponent,SnackBarComponentExample} from './snack-bar-component/snack-bar-component-example';\nimport {SnackBarOverviewExample} from './snack-bar-overview/snack-bar-overview-example';\nimport {SortOverviewExample} from './sort-overview/sort-overview-example';\nimport {TableBasicExample} from './table-basic/table-basic-example';\nimport {TableHttpExample} from './table-http/table-http-example';\nimport {TableFilteringExample} from './table-filtering/table-filtering-example';\nimport {TableOverviewExample} from './table-overview/table-overview-example';\nimport {TablePaginationExample} from './table-pagination/table-pagination-example';\nimport {TableSortingExample} from './table-sorting/table-sorting-example';\nimport {TabsOverviewExample} from './tabs-overview/tabs-overview-example';\nimport {TabsTemplateLabelExample} from './tabs-template-label/tabs-template-label-example';\nimport {ToolbarMultirowExample} from './toolbar-multirow/toolbar-multirow-example';\nimport {ToolbarOverviewExample} from './toolbar-overview/toolbar-overview-example';\nimport {TooltipOverviewExample} from './tooltip-overview/tooltip-overview-example';\nimport {TooltipPositionExample} from './tooltip-position/tooltip-position-example';\n\nexport const /** @type {?} */ EXAMPLE_COMPONENTS = {\n  'autocomplete-overview': {\n    title: 'Basic autocomplete',\n    component: AutocompleteOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'button-overview': {\n    title: 'Basic buttons',\n    component: ButtonOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'button-toggle-exclusive': {\n    title: 'Exclusive selection',\n    component: ButtonToggleExclusiveExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'button-toggle-overview': {\n    title: 'Basic button-toggles',\n    component: ButtonToggleOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'button-types': {\n    title: 'Button varieties',\n    component: ButtonTypesExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'card-fancy': {\n    title: 'Card with multiple sections',\n    component: CardFancyExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'card-overview': {\n    title: 'Basic cards',\n    component: CardOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'cdk-table-basic': {\n    title: 'Basic CDK data-table',\n    component: CdkTableBasicExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'checkbox-configurable': {\n    title: 'Configurable checkbox',\n    component: CheckboxConfigurableExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'checkbox-overview': {\n    title: 'Basic checkboxes',\n    component: CheckboxOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'chips-overview': {\n    title: 'Basic chips',\n    component: ChipsOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'chips-stacked': {\n    title: 'Stacked chips',\n    component: ChipsStackedExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'datepicker-api': {\n    title: 'Datepicker API',\n    component: DatepickerApiExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'datepicker-filter': {\n    title: 'Datepicker Filter',\n    component: DatepickerFilterExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'datepicker-min-max': {\n    title: 'Datepicker Min Max',\n    component: DatepickerMinMaxExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'datepicker-overview': {\n    title: 'Basic datepicker',\n    component: DatepickerOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'datepicker-start-view': {\n    title: 'Datepicker start date',\n    component: DatepickerStartViewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'datepicker-touch': {\n    title: 'Datepicker Touch',\n    component: DatepickerTouchExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'dialog-content': {\n    title: 'Dialog with header, scrollable content and actions',\n    component: DialogContentExample,\n    additionalFiles: [\"dialog-content-example-dialog.html\"],\n    selectorName: 'DialogContentExample, DialogContentExampleDialog'\n  },\n  'dialog-data': {\n    title: 'Injecting data when opening a dialog',\n    component: DialogDataExample,\n    additionalFiles: [\"dialog-data-example-dialog.html\"],\n    selectorName: 'DialogDataExample, DialogDataExampleDialog'\n  },\n  'dialog-elements': {\n    title: 'Dialog elements',\n    component: DialogElementsExample,\n    additionalFiles: [\"dialog-elements-example-dialog.html\"],\n    selectorName: 'DialogElementsExample, DialogElementsExampleDialog'\n  },\n  'dialog-overview': {\n    title: 'Dialog Overview',\n    component: DialogOverviewExample,\n    additionalFiles: [\"dialog-overview-example-dialog.html\"],\n    selectorName: 'DialogOverviewExample, DialogOverviewExampleDialog'\n  },\n  'grid-list-dynamic': {\n    title: 'Dynamic grid-list',\n    component: GridListDynamicExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'grid-list-overview': {\n    title: 'Basic grid-list',\n    component: GridListOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'icon-overview': {\n    title: 'Basic icons',\n    component: IconOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'icon-svg': {\n    title: 'SVG icons',\n    component: IconSvgExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'input-clearable': {\n    title: 'Input Clearable',\n    component: InputClearableExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'input-errors': {\n    title: 'Input Errors',\n    component: InputErrorsExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'input-form': {\n    title: 'Inputs in a form',\n    component: InputFormExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'input-hint': {\n    title: 'Input hints',\n    component: InputHintExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'input-overview': {\n    title: 'Basic Inputs',\n    component: InputOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'input-prefix-suffix': {\n    title: 'Input Prefixes and Suffixes',\n    component: InputPrefixSuffixExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'list-overview': {\n    title: 'Basic list',\n    component: ListOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'list-sections': {\n    title: 'List with sections',\n    component: ListSectionsExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'menu-icons': {\n    title: 'Menu with icons',\n    component: MenuIconsExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'menu-overview': {\n    title: 'Basic menu',\n    component: MenuOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'paginator-configurable': {\n    title: 'Configurable paginator',\n    component: PaginatorConfigurableExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'paginator-overview': {\n    title: 'Paginator',\n    component: PaginatorOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'progress-bar-configurable': {\n    title: 'Configurable progress-bar',\n    component: ProgressBarConfigurableExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'progress-bar-overview': {\n    title: 'Basic progress-bar',\n    component: ProgressBarOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'progress-spinner-configurable': {\n    title: 'Configurable progress spinner',\n    component: ProgressSpinnerConfigurableExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'progress-spinner-overview': {\n    title: 'Basic progress-spinner',\n    component: ProgressSpinnerOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'radio-ng-model': {\n    title: 'Radios with ngModel',\n    component: RadioNgModelExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'radio-overview': {\n    title: 'Basic radios',\n    component: RadioOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'select-form': {\n    title: 'Select in a form',\n    component: SelectFormExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'select-overview': {\n    title: 'Basic select',\n    component: SelectOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'sidenav-fab': {\n    title: 'Sidenav with a FAB',\n    component: SidenavFabExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'sidenav-overview': {\n    title: 'Basic sidenav',\n    component: SidenavOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'slide-toggle-configurable': {\n    title: 'Configurable slide-toggle',\n    component: SlideToggleConfigurableExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'slide-toggle-forms': {\n    title: 'Slide-toggle with forms',\n    component: SlideToggleFormsExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'slide-toggle-overview': {\n    title: 'Basic slide-toggles',\n    component: SlideToggleOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'slider-configurable': {\n    title: 'Configurable slider',\n    component: SliderConfigurableExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'slider-overview': {\n    title: 'Basic slider',\n    component: SliderOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'snack-bar-component': {\n    title: 'Snack-bar with a custom component',\n    component: SnackBarComponentExample,\n    additionalFiles: [\"snack-bar-component-example-snack.html\"],\n    selectorName: 'SnackBarComponentExample, PizzaPartyComponent'\n  },\n  'snack-bar-overview': {\n    title: 'Basic snack-bar',\n    component: SnackBarOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'sort-overview': {\n    title: 'Sorting overview',\n    component: SortOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'table-basic': {\n    title: 'Basic table',\n    component: TableBasicExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'table-http': {\n    title: 'Table retrieving data through HTTP',\n    component: TableHttpExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'table-filtering': {\n    title: 'Table with filtering',\n    component: TableFilteringExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'table-overview': {\n    title: 'Feature-rich data table',\n    component: TableOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'table-pagination': {\n    title: 'Table with pagination',\n    component: TablePaginationExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'table-sorting': {\n    title: 'Table with sorting',\n    component: TableSortingExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'tabs-overview': {\n    title: 'Basic tabs',\n    component: TabsOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'tabs-template-label': {\n    title: 'Coming soon!',\n    component: TabsTemplateLabelExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'toolbar-multirow': {\n    title: 'Multi-row toolbar',\n    component: ToolbarMultirowExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'toolbar-overview': {\n    title: 'Basic toolbar',\n    component: ToolbarOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'tooltip-overview': {\n    title: 'Basic tooltip',\n    component: TooltipOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'tooltip-position': {\n    title: 'Tooltip with custom position',\n    component: TooltipPositionExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n};\n\nexport const /** @type {?} */ EXAMPLE_LIST = [\n  AutocompleteOverviewExample,\n  ButtonOverviewExample,\n  ButtonToggleExclusiveExample,\n  ButtonToggleOverviewExample,\n  ButtonTypesExample,\n  CardFancyExample,\n  CardOverviewExample,\n  CdkTableBasicExample,\n  CheckboxConfigurableExample,\n  CheckboxOverviewExample,\n  ChipsOverviewExample,\n  ChipsStackedExample,\n  DatepickerApiExample,\n  DatepickerFilterExample,\n  DatepickerMinMaxExample,\n  DatepickerOverviewExample,\n  DatepickerStartViewExample,\n  DatepickerTouchExample,\n  DialogContentExampleDialog,DialogContentExample,\n  DialogDataExampleDialog,DialogDataExample,\n  DialogElementsExampleDialog,DialogElementsExample,\n  DialogOverviewExampleDialog,DialogOverviewExample,\n  GridListDynamicExample,\n  GridListOverviewExample,\n  IconOverviewExample,\n  IconSvgExample,\n  InputClearableExample,\n  InputErrorsExample,\n  InputFormExample,\n  InputHintExample,\n  InputOverviewExample,\n  InputPrefixSuffixExample,\n  ListOverviewExample,\n  ListSectionsExample,\n  MenuIconsExample,\n  MenuOverviewExample,\n  PaginatorConfigurableExample,\n  PaginatorOverviewExample,\n  ProgressBarConfigurableExample,\n  ProgressBarOverviewExample,\n  ProgressSpinnerConfigurableExample,\n  ProgressSpinnerOverviewExample,\n  RadioNgModelExample,\n  RadioOverviewExample,\n  SelectFormExample,\n  SelectOverviewExample,\n  SidenavFabExample,\n  SidenavOverviewExample,\n  SlideToggleConfigurableExample,\n  SlideToggleFormsExample,\n  SlideToggleOverviewExample,\n  SliderConfigurableExample,\n  SliderOverviewExample,\n  PizzaPartyComponent,SnackBarComponentExample,\n  SnackBarOverviewExample,\n  SortOverviewExample,\n  TableBasicExample,\n  TableFilteringExample,\n  TableHttpExample,\n  TableOverviewExample,\n  TablePaginationExample,\n  TableSortingExample,\n  TabsOverviewExample,\n  TabsTemplateLabelExample,\n  ToolbarMultirowExample,\n  ToolbarOverviewExample,\n  TooltipOverviewExample,\n  TooltipPositionExample,\n];\nexport class ExampleModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: EXAMPLE_LIST,\n  entryComponents: EXAMPLE_LIST,\n  imports: [\n    ExampleMaterialModule,\n    FormsModule,\n    ReactiveFormsModule,\n    CommonModule\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ExampleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nExampleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nExampleModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {EXAMPLE_COMPONENTS} from './example-module';\n/**\n * Example data\n *   with information about Component name, selector, files used in example, and path to examples\n */\nexport class ExampleData {\n  // TODO: figure out how do we get these variables.\n  description: string = 'Some description for material';\n  // TODO: use real example and delete the example/ folder.\n  examplePath = '/assets/example/';\n  exampleFiles = ['button-demo.html', 'button-demo.scss', 'button-demo.ts'];\n\n  // TODO: extract these variables from example code.\n  selectorName = 'button-demo';\n  indexFilename = 'button-demo';\n  componentName = 'ButtonDemo';\n/**\n * @param {?} example\n */\nconstructor(example: string) {\n    if (example && EXAMPLE_COMPONENTS[example]) {\n      this.examplePath = `/assets/plunker/examples/${example}/`;\n      // TODO(tinayuangao): Do not hard-code extensions\n      this.exampleFiles = ['html', 'ts', 'css']\n        .map((extension) => `${example}-example.${extension}`);\n      if (EXAMPLE_COMPONENTS[example].additionalFiles) {\n        this.exampleFiles = this.exampleFiles.concat(EXAMPLE_COMPONENTS[example].additionalFiles);\n      }\n      this.selectorName = this.indexFilename = `${example}-example`;\n\n      let exampleName = example.replace(/(?:^\\w|\\b\\w)/g, letter => letter.toUpperCase());\n\n      if (EXAMPLE_COMPONENTS[example].title) {\n        this.description = EXAMPLE_COMPONENTS[example].title;\n      } else {\n        this.description = exampleName.replace(/[\\-]+/g, ' ') + ' Example';\n      }\n\n      if (EXAMPLE_COMPONENTS[example].selectorName) {\n        this.componentName = EXAMPLE_COMPONENTS[example].selectorName;\n      } else {\n        this.componentName = exampleName.replace(/[\\-]+/g, '') + 'Example';\n      }\n    }\n  }\n}\n\nfunction ExampleData_tsickle_Closure_declarations() {\n/** @type {?} */\nExampleData.prototype.description;\n/** @type {?} */\nExampleData.prototype.examplePath;\n/** @type {?} */\nExampleData.prototype.exampleFiles;\n/** @type {?} */\nExampleData.prototype.selectorName;\n/** @type {?} */\nExampleData.prototype.indexFilename;\n/** @type {?} */\nExampleData.prototype.componentName;\n}\n\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {ExampleData,LiveExample,EXAMPLE_COMPONENTS,EXAMPLE_LIST,ExampleModule,DatepickerOverviewExample,CardFancyExample} from './public_api';\n\nexport {AutocompleteOverviewExample as ɵa} from './autocomplete-overview/autocomplete-overview-example';\nexport {ButtonOverviewExample as ɵb} from './button-overview/button-overview-example';\nexport {ButtonToggleExclusiveExample as ɵc} from './button-toggle-exclusive/button-toggle-exclusive-example';\nexport {ButtonToggleOverviewExample as ɵd} from './button-toggle-overview/button-toggle-overview-example';\nexport {ButtonTypesExample as ɵe} from './button-types/button-types-example';\nexport {CardOverviewExample as ɵf} from './card-overview/card-overview-example';\nexport {CdkTableBasicExample as ɵg} from './cdk-table-basic/cdk-table-basic-example';\nexport {CheckboxConfigurableExample as ɵh} from './checkbox-configurable/checkbox-configurable-example';\nexport {CheckboxOverviewExample as ɵi} from './checkbox-overview/checkbox-overview-example';\nexport {ChipsOverviewExample as ɵj} from './chips-overview/chips-overview-example';\nexport {ChipsStackedExample as ɵk} from './chips-stacked/chips-stacked-example';\nexport {DatepickerApiExample as ɵl} from './datepicker-api/datepicker-api-example';\nexport {DatepickerFilterExample as ɵm} from './datepicker-filter/datepicker-filter-example';\nexport {DatepickerMinMaxExample as ɵn} from './datepicker-min-max/datepicker-min-max-example';\nexport {DatepickerStartViewExample as ɵo} from './datepicker-start-view/datepicker-start-view-example';\nexport {DatepickerTouchExample as ɵp} from './datepicker-touch/datepicker-touch-example';\nexport {DialogContentExample as ɵq,DialogContentExampleDialog as ɵr} from './dialog-content/dialog-content-example';\nexport {DialogDataExample as ɵs,DialogDataExampleDialog as ɵt} from './dialog-data/dialog-data-example';\nexport {DialogElementsExample as ɵu,DialogElementsExampleDialog as ɵv} from './dialog-elements/dialog-elements-example';\nexport {DialogOverviewExample as ɵw,DialogOverviewExampleDialog as ɵx} from './dialog-overview/dialog-overview-example';\nexport {GridListDynamicExample as ɵy} from './grid-list-dynamic/grid-list-dynamic-example';\nexport {GridListOverviewExample as ɵz} from './grid-list-overview/grid-list-overview-example';\nexport {IconOverviewExample as ɵba} from './icon-overview/icon-overview-example';\nexport {IconSvgExample as ɵbb} from './icon-svg-example/icon-svg-example';\nexport {InputClearableExample as ɵbc} from './input-clearable/input-clearable-example';\nexport {InputErrorsExample as ɵbd} from './input-errors/input-errors-example';\nexport {InputFormExample as ɵbe} from './input-form/input-form-example';\nexport {InputHintExample as ɵbf} from './input-hint/input-hint-example';\nexport {InputOverviewExample as ɵbg} from './input-overview/input-overview-example';\nexport {InputPrefixSuffixExample as ɵbh} from './input-prefix-suffix/input-prefix-suffix-example';\nexport {ListOverviewExample as ɵbi} from './list-overview/list-overview-example';\nexport {ListSectionsExample as ɵbj} from './list-sections/list-sections-example';\nexport {ExampleMaterialModule as ɵct} from './material-module';\nexport {MenuIconsExample as ɵbk} from './menu-icons/menu-icons-example';\nexport {MenuOverviewExample as ɵbl} from './menu-overview/menu-overview-example';\nexport {PaginatorConfigurableExample as ɵbm} from './paginator-configurable/paginator-configurable-example';\nexport {PaginatorOverviewExample as ɵbn} from './paginator-overview/paginator-overview-example';\nexport {ProgressBarConfigurableExample as ɵbo} from './progress-bar-configurable/progress-bar-configurable-example';\nexport {ProgressBarOverviewExample as ɵbp} from './progress-bar-overview/progress-bar-overview-example';\nexport {ProgressSpinnerConfigurableExample as ɵbq} from './progress-spinner-configurable/progress-spinner-configurable-example';\nexport {ProgressSpinnerOverviewExample as ɵbr} from './progress-spinner-overview/progress-spinner-overview-example';\nexport {RadioNgModelExample as ɵbs} from './radio-ng-model/radio-ng-model-example';\nexport {RadioOverviewExample as ɵbt} from './radio-overview/radio-overview-example';\nexport {SelectFormExample as ɵbu} from './select-form/select-form-example';\nexport {SelectOverviewExample as ɵbv} from './select-overview/select-overview-example';\nexport {SidenavFabExample as ɵbw} from './sidenav-fab/sidenav-fab-example';\nexport {SidenavOverviewExample as ɵbx} from './sidenav-overview/sidenav-overview-example';\nexport {SlideToggleConfigurableExample as ɵby} from './slide-toggle-configurable/slide-toggle-configurable-example';\nexport {SlideToggleFormsExample as ɵbz} from './slide-toggle-forms/slide-toggle-forms-example';\nexport {SlideToggleOverviewExample as ɵca} from './slide-toggle-overview/slide-toggle-overview-example';\nexport {SliderConfigurableExample as ɵcb} from './slider-configurable/slider-configurable-example';\nexport {SliderOverviewExample as ɵcc} from './slider-overview/slider-overview-example';\nexport {PizzaPartyComponent as ɵce,SnackBarComponentExample as ɵcd} from './snack-bar-component/snack-bar-component-example';\nexport {SnackBarOverviewExample as ɵcf} from './snack-bar-overview/snack-bar-overview-example';\nexport {SortOverviewExample as ɵcg} from './sort-overview/sort-overview-example';\nexport {TableBasicExample as ɵch} from './table-basic/table-basic-example';\nexport {TableFilteringExample as ɵcj} from './table-filtering/table-filtering-example';\nexport {TableHttpExample as ɵci} from './table-http/table-http-example';\nexport {TableOverviewExample as ɵck} from './table-overview/table-overview-example';\nexport {TablePaginationExample as ɵcl} from './table-pagination/table-pagination-example';\nexport {TableSortingExample as ɵcm} from './table-sorting/table-sorting-example';\nexport {TabsOverviewExample as ɵcn} from './tabs-overview/tabs-overview-example';\nexport {TabsTemplateLabelExample as ɵco} from './tabs-template-label/tabs-template-label-example';\nexport {ToolbarMultirowExample as ɵcp} from './toolbar-multirow/toolbar-multirow-example';\nexport {ToolbarOverviewExample as ɵcq} from './toolbar-overview/toolbar-overview-example';\nexport {TooltipOverviewExample as ɵcr} from './tooltip-overview/tooltip-overview-example';\nexport {TooltipPositionExample as ɵcs} from './tooltip-position/tooltip-position-example';","import {Component} from '@angular/core';\n/**\n * \\@title Radios with ngModel\n */\nexport class RadioNgModelExample {\n  favoriteSeason: string;\n\n  seasons = [\n    'Winter',\n    'Spring',\n    'Summer',\n    'Autumn',\n  ];\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'radio-ng-model-example',\n  templateUrl: 'radio-ng-model-example.html',\n  styleUrls: ['radio-ng-model-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction RadioNgModelExample_tsickle_Closure_declarations() {\n/** @type {?} */\nRadioNgModelExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRadioNgModelExample.ctorParameters;\n/** @type {?} */\nRadioNgModelExample.prototype.favoriteSeason;\n/** @type {?} */\nRadioNgModelExample.prototype.seasons;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic radios\n */\nexport class RadioOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'radio-overview-example',\n  templateUrl: 'radio-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction RadioOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nRadioOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRadioOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Select in a form\n */\nexport class SelectFormExample {\n  selectedValue: string;\n\n  foods = [\n    {value: 'steak-0', viewValue: 'Steak'},\n    {value: 'pizza-1', viewValue: 'Pizza'},\n    {value: 'tacos-2', viewValue: 'Tacos'}\n  ];\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'select-form-example',\n  templateUrl: 'select-form-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SelectFormExample_tsickle_Closure_declarations() {\n/** @type {?} */\nSelectFormExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSelectFormExample.ctorParameters;\n/** @type {?} */\nSelectFormExample.prototype.selectedValue;\n/** @type {?} */\nSelectFormExample.prototype.foods;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic select\n */\nexport class SelectOverviewExample {\n  foods = [\n    {value: 'steak-0', viewValue: 'Steak'},\n    {value: 'pizza-1', viewValue: 'Pizza'},\n    {value: 'tacos-2', viewValue: 'Tacos'}\n  ];\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'select-overview-example',\n  templateUrl: 'select-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SelectOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nSelectOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSelectOverviewExample.ctorParameters;\n/** @type {?} */\nSelectOverviewExample.prototype.foods;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component, ViewEncapsulation} from '@angular/core';\n/**\n * \\@title Sidenav with a FAB\n */\nexport class SidenavFabExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'sidenav-fab-example',\n  templateUrl: 'sidenav-fab-example.html',\n  styleUrls: ['sidenav-fab-example.css'],\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SidenavFabExample_tsickle_Closure_declarations() {\n/** @type {?} */\nSidenavFabExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSidenavFabExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic sidenav\n */\nexport class SidenavOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'sidenav-overview-example',\n  templateUrl: 'sidenav-overview-example.html',\n  styleUrls: ['sidenav-overview-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SidenavOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nSidenavOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSidenavOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Configurable slide-toggle\n */\nexport class SlideToggleConfigurableExample {\n  color = 'accent';\n  checked = false;\n  disabled = false;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'slide-toggle-configurable-example',\n  templateUrl: 'slide-toggle-configurable-example.html',\n  styleUrls: ['slide-toggle-configurable-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SlideToggleConfigurableExample_tsickle_Closure_declarations() {\n/** @type {?} */\nSlideToggleConfigurableExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSlideToggleConfigurableExample.ctorParameters;\n/** @type {?} */\nSlideToggleConfigurableExample.prototype.color;\n/** @type {?} */\nSlideToggleConfigurableExample.prototype.checked;\n/** @type {?} */\nSlideToggleConfigurableExample.prototype.disabled;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\n/**\n * \\@title Slide-toggle with forms\n */\nexport class SlideToggleFormsExample {\n  isChecked = true;\n  formGroup: FormGroup;\n/**\n * @param {?} formBuilder\n */\nconstructor(formBuilder: FormBuilder) {\n    this.formGroup = formBuilder.group({\n      enableWifi: '',\n      acceptTerms: ['', Validators.requiredTrue]\n    });\n  }\n/**\n * @param {?} formValue\n * @return {?}\n */\nonFormSubmit(formValue: any) {\n    alert(JSON.stringify(formValue, null, 2));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'slide-toggle-forms-example',\n  templateUrl: './slide-toggle-forms-example.html',\n  styleUrls: ['./slide-toggle-forms-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: FormBuilder, },\n];\n}\n\nfunction SlideToggleFormsExample_tsickle_Closure_declarations() {\n/** @type {?} */\nSlideToggleFormsExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSlideToggleFormsExample.ctorParameters;\n/** @type {?} */\nSlideToggleFormsExample.prototype.isChecked;\n/** @type {?} */\nSlideToggleFormsExample.prototype.formGroup;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic slide-toggles\n */\nexport class SlideToggleOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'slide-toggle-overview-example',\n  templateUrl: 'slide-toggle-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SlideToggleOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nSlideToggleOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSlideToggleOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component, ViewEncapsulation} from '@angular/core';\n/**\n * \\@title Configurable slider\n */\nexport class SliderConfigurableExample {\n  autoTicks = false;\n  disabled = false;\n  invert = false;\n  max = 100;\n  min = 0;\n  showTicks = false;\n  step = 1;\n  thumbLabel = false;\n  value = 0;\n  vertical = false;\n/**\n * @return {?}\n */\nget tickInterval(): number | 'auto' {\n    return this.showTicks ? (this.autoTicks ? 'auto' : this._tickInterval) : 0;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset tickInterval(v) {\n    this._tickInterval = Number(v);\n  }\nprivate _tickInterval = 1;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'slider-configurable-example',\n  templateUrl: 'slider-configurable-example.html',\n  styleUrls: ['slider-configurable-example.css'],\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SliderConfigurableExample_tsickle_Closure_declarations() {\n/** @type {?} */\nSliderConfigurableExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSliderConfigurableExample.ctorParameters;\n/** @type {?} */\nSliderConfigurableExample.prototype.autoTicks;\n/** @type {?} */\nSliderConfigurableExample.prototype.disabled;\n/** @type {?} */\nSliderConfigurableExample.prototype.invert;\n/** @type {?} */\nSliderConfigurableExample.prototype.max;\n/** @type {?} */\nSliderConfigurableExample.prototype.min;\n/** @type {?} */\nSliderConfigurableExample.prototype.showTicks;\n/** @type {?} */\nSliderConfigurableExample.prototype.step;\n/** @type {?} */\nSliderConfigurableExample.prototype.thumbLabel;\n/** @type {?} */\nSliderConfigurableExample.prototype.value;\n/** @type {?} */\nSliderConfigurableExample.prototype.vertical;\n/** @type {?} */\nSliderConfigurableExample.prototype._tickInterval;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic slider\n */\nexport class SliderOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'slider-overview-example',\n  templateUrl: 'slider-overview-example.html',\n  styleUrls: ['slider-overview-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SliderOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nSliderOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSliderOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\nimport {MdSnackBar} from '@angular/material';\n/**\n * \\@title Snack-bar with a custom component\n */\nexport class SnackBarComponentExample {\n/**\n * @param {?} snackBar\n */\nconstructor(public snackBar: MdSnackBar) {}\n/**\n * @return {?}\n */\nopenSnackBar() {\n    this.snackBar.openFromComponent(PizzaPartyComponent, {\n      duration: 500,\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'snack-bar-component-example',\n  templateUrl: 'snack-bar-component-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdSnackBar, },\n];\n}\n\nfunction SnackBarComponentExample_tsickle_Closure_declarations() {\n/** @type {?} */\nSnackBarComponentExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSnackBarComponentExample.ctorParameters;\n/** @type {?} */\nSnackBarComponentExample.prototype.snackBar;\n}\n\nexport class PizzaPartyComponent {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'snack-bar-component-example-snack',\n  templateUrl: 'snack-bar-component-example-snack.html',\n  styleUrls: ['snack-bar-component-example-snack.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction PizzaPartyComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nPizzaPartyComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPizzaPartyComponent.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\nimport {MdSnackBar} from '@angular/material';\n/**\n * \\@title Basic snack-bar\n */\nexport class SnackBarOverviewExample {\n/**\n * @param {?} snackBar\n */\nconstructor(public snackBar: MdSnackBar) {}\n/**\n * @param {?} message\n * @param {?} action\n * @return {?}\n */\nopenSnackBar(message: string, action: string) {\n    this.snackBar.open(message, action, {\n      duration: 2000,\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'snack-bar-overview-example',\n  templateUrl: 'snack-bar-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdSnackBar, },\n];\n}\n\nfunction SnackBarOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nSnackBarOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSnackBarOverviewExample.ctorParameters;\n/** @type {?} */\nSnackBarOverviewExample.prototype.snackBar;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\nimport {Sort} from '@angular/material';\n/**\n * \\@title Sorting overview\n */\nexport class SortOverviewExample {\n  desserts = [\n    {name: 'Frozen yogurt', calories: '159', fat: '6', carbs: '24', protein: '4'},\n    {name: 'Ice cream sandwich', calories: '237', fat: '9', carbs: '37', protein: '4'},\n    {name: 'Eclair', calories: '262', fat: '16', carbs: '24', protein: '6'},\n    {name: 'Cupcake', calories: '305', fat: '4', carbs: '67', protein: '4'},\n    {name: 'Gingerbread', calories: '356', fat: '16', carbs: '49', protein: '4'},\n  ];\n\n  sortedData;\nconstructor() {\n    this.sortedData = this.desserts.slice();\n  }\n/**\n * @param {?} sort\n * @return {?}\n */\nsortData(sort: Sort) {\n    const /** @type {?} */ data = this.desserts.slice();\n    if (!sort.active || sort.direction == '') {\n      this.sortedData = data;\n      return;\n    }\n\n    this.sortedData = data.sort((a, b) => {\n      let /** @type {?} */ isAsc = sort.direction == 'asc';\n      switch (sort.active) {\n        case 'name': return compare(a.name, b.name, isAsc);\n        case 'calories': return compare(+a.calories, +b.calories, isAsc);\n        case 'fat': return compare(+a.fat, +b.fat, isAsc);\n        case 'carbs': return compare(+a.carbs, +b.carbs, isAsc);\n        case 'protein': return compare(+a.protein, +b.protein, isAsc);\n        default: return 0;\n      }\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'sort-overview-example',\n  templateUrl: 'sort-overview-example.html',\n  styleUrls: ['sort-overview-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SortOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nSortOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSortOverviewExample.ctorParameters;\n/** @type {?} */\nSortOverviewExample.prototype.desserts;\n/** @type {?} */\nSortOverviewExample.prototype.sortedData;\n}\n\n/**\n * @param {?} a\n * @param {?} b\n * @param {?} isAsc\n * @return {?}\n */\nfunction compare(a, b, isAsc) {\n  return (a < b ? -1 : 1) * (isAsc ? 1 : -1);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\nimport {DataSource} from '@angular/cdk';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {Observable} from 'rxjs/Observable';\nimport'rxjs/add/operator/startWith';\nimport'rxjs/add/observable/merge';\nimport'rxjs/add/operator/map';\n/**\n * \\@title Basic table\n */\nexport class TableBasicExample {\n  displayedColumns = ['userId', 'userName', 'progress', 'color'];\n  exampleDatabase = new ExampleDatabase();\n  dataSource: ExampleDataSource | null;\n/**\n * @return {?}\n */\nngOnInit() {\n    this.dataSource = new ExampleDataSource(this.exampleDatabase);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'table-basic-example',\n  styleUrls: ['table-basic-example.css'],\n  templateUrl: 'table-basic-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction TableBasicExample_tsickle_Closure_declarations() {\n/** @type {?} */\nTableBasicExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTableBasicExample.ctorParameters;\n/** @type {?} */\nTableBasicExample.prototype.displayedColumns;\n/** @type {?} */\nTableBasicExample.prototype.exampleDatabase;\n/** @type {?} */\nTableBasicExample.prototype.dataSource;\n}\n\n/**\n * Constants used to fill up our data base.\n */\nconst COLORS = ['maroon', 'red', 'orange', 'yellow', 'olive', 'green', 'purple',\n  'fuchsia', 'lime', 'teal', 'aqua', 'blue', 'navy', 'black', 'gray'];\nconst /** @type {?} */ NAMES = ['Maia', 'Asher', 'Olivia', 'Atticus', 'Amelia', 'Jack',\n  'Charlotte', 'Theodore', 'Isla', 'Oliver', 'Isabella', 'Jasper',\n  'Cora', 'Levi', 'Violet', 'Arthur', 'Mia', 'Thomas', 'Elizabeth'];\n\nexport interface UserData {\n  id: string;\n  name: string;\n  progress: string;\n  color: string;\n}\n/**\n * An example database that the data source uses to retrieve data for the table.\n */\nexport class ExampleDatabase {\n/**\n * Stream that emits whenever the data has been modified.\n */\ndataChange: BehaviorSubject<UserData[]> = new BehaviorSubject<UserData[]>([]);\n/**\n * @return {?}\n */\nget data(): UserData[] { return this.dataChange.value; }\nconstructor() {\n    // Fill up the database with 100 users.\n    for (let i = 0; i < 100; i++) { this.addUser(); }\n  }\n/**\n * Adds a new user to the database.\n * @return {?}\n */\naddUser() {\n    const /** @type {?} */ copiedData = this.data.slice();\n    copiedData.push(this.createNewUser());\n    this.dataChange.next(copiedData);\n  }\n/**\n * Builds and returns a new User.\n * @return {?}\n */\nprivate createNewUser() {\n    const /** @type {?} */ name =\n        NAMES[Math.round(Math.random() * (NAMES.length - 1))] + ' ' +\n        NAMES[Math.round(Math.random() * (NAMES.length - 1))].charAt(0) + '.';\n\n    return {\n      id: (this.data.length + 1).toString(),\n      name: name,\n      progress: Math.round(Math.random() * 100).toString(),\n      color: COLORS[Math.round(Math.random() * (COLORS.length - 1))]\n    };\n  }\n}\n\nfunction ExampleDatabase_tsickle_Closure_declarations() {\n/**\n * Stream that emits whenever the data has been modified.\n * @type {?}\n */\nExampleDatabase.prototype.dataChange;\n}\n\n/**\n * Data source to provide what data should be rendered in the table. Note that the data source\n * can retrieve its data in any way. In this case, the data source is provided a reference\n * to a common data base, ExampleDatabase. It is not the data source's responsibility to manage\n * the underlying data. Instead, it only needs to take the data and send the table exactly what\n * should be rendered.\n */\nexport class ExampleDataSource extends DataSource<any> {\n/**\n * @param {?} _exampleDatabase\n */\nconstructor(private _exampleDatabase: ExampleDatabase) {\n    super();\n  }\n/**\n * Connect function called by the table to retrieve one stream containing the data to render.\n * @return {?}\n */\nconnect(): Observable<UserData[]> {\n    return this._exampleDatabase.dataChange;\n  }\n/**\n * @return {?}\n */\ndisconnect() {}\n}\n\nfunction ExampleDataSource_tsickle_Closure_declarations() {\n/** @type {?} */\nExampleDataSource.prototype._exampleDatabase;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component, ViewChild} from '@angular/core';\nimport {Http, Response} from '@angular/http';\nimport {DataSource} from '@angular/cdk';\nimport {MdPaginator, MdSort} from '@angular/material';\nimport {Observable} from 'rxjs/Observable';\nimport'rxjs/add/operator/first';\nimport'rxjs/add/operator/startWith';\nimport'rxjs/add/operator/catch';\nimport'rxjs/add/operator/switchMap';\nimport'rxjs/add/observable/merge';\nimport'rxjs/add/observable/of';\nimport'rxjs/add/observable/interval';\nimport'rxjs/add/operator/map';\nexport class TableHttpExample {\n  displayedColumns = ['created', 'state', 'number', 'title'];\n  exampleDatabase: ExampleHttpDao | null;\n  dataSource: ExampleDataSource | null;\n\n   paginator: MdPaginator;\n   sort: MdSort;\n/**\n * @param {?} http\n */\nconstructor(http: Http) {\n    this.exampleDatabase = new ExampleHttpDao(http);\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this.dataSource = new ExampleDataSource( /** @type {?} */((this.exampleDatabase)),\n        this.sort, this.paginator);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'table-http-example',\n  styleUrls: ['table-http-example.css'],\n  templateUrl: 'table-http-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'paginator': [{ type: ViewChild, args: [MdPaginator, ] },],\n'sort': [{ type: ViewChild, args: [MdSort, ] },],\n};\n}\n\nfunction TableHttpExample_tsickle_Closure_declarations() {\n/** @type {?} */\nTableHttpExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTableHttpExample.ctorParameters;\n/** @type {?} */\nTableHttpExample.propDecorators;\n/** @type {?} */\nTableHttpExample.prototype.displayedColumns;\n/** @type {?} */\nTableHttpExample.prototype.exampleDatabase;\n/** @type {?} */\nTableHttpExample.prototype.dataSource;\n/** @type {?} */\nTableHttpExample.prototype.paginator;\n/** @type {?} */\nTableHttpExample.prototype.sort;\n}\n\n\nexport interface GithubIssue {\n  number: string;\n  state: string;\n  title: string;\n  created: Date;\n}\n/**\n * An example database that the data source uses to retrieve data for the table.\n */\nexport class ExampleHttpDao {\n/**\n * @param {?} http\n */\nconstructor(private http: Http) {}\n/**\n * @param {?} sort\n * @param {?} order\n * @param {?} page\n * @return {?}\n */\ngetRepoIssues(sort: string, order: string, page: number): Observable<Response> {\n    const /** @type {?} */ href = 'https://api.github.com/search/issues';\n    const /** @type {?} */ requestUrl =\n        `${href}?q=repo:angular/material2&sort=${sort}&order=${order}&page=${page + 1}`;\n    return this.http.get(requestUrl);\n  }\n}\n\nfunction ExampleHttpDao_tsickle_Closure_declarations() {\n/** @type {?} */\nExampleHttpDao.prototype.http;\n}\n\n/**\n * Data source to provide what data should be rendered in the table. Note that the data source\n * can retrieve its data in any way. In this case, the data source is provided a reference\n * to a common data base, ExampleHttpDao. It is not the data source's responsibility to manage\n * the underlying data. Instead, it only needs to take the data and send the table exactly what\n * should be rendered.\n */\nexport class ExampleDataSource extends DataSource<GithubIssue> {\n  // The number of issues returned by github matching the query.\n  resultsLength: number = 0;\n  isLoadingResults: boolean;\n  isRateLimitReached: boolean;\n/**\n * @param {?} _exampleDatabase\n * @param {?} _sort\n * @param {?} _paginator\n */\nconstructor(private _exampleDatabase: ExampleHttpDao,\nprivate _sort: MdSort,\nprivate _paginator: MdPaginator) {\n    super();\n  }\n/**\n * Connect function called by the table to retrieve one stream containing the data to render.\n * @return {?}\n */\nconnect(): Observable<GithubIssue[]> {\n    const /** @type {?} */ displayDataChanges = [\n      this._sort.mdSortChange,\n      this._paginator.page,\n    ];\n\n    // If the user changes the sort order, reset back to the first page.\n    this._sort.mdSortChange.subscribe(() => {\n      this._paginator.pageIndex = 0;\n    });\n\n    return Observable.merge(...displayDataChanges)\n        .startWith(null)\n        .switchMap(() => {\n          this.isLoadingResults = true;\n          return this._exampleDatabase.getRepoIssues(\n              this._sort.active, this._sort.direction, this._paginator.pageIndex);\n        })\n        .catch(() => {\n          // Catch if the GitHub API has reached its rate limit. Return empty result.\n          this.isRateLimitReached = true;\n          return Observable.of(null);\n        })\n        .map(result => {\n          // Flip flag to show that loading has finished.\n          this.isLoadingResults = false;\n          return result;\n        })\n        .map(result => {\n          if (!result) { return []; }\n\n          this.isRateLimitReached = false;\n          this.resultsLength = result.json().total_count;\n\n          return this.readGithubResult(result);\n        });\n\n\n  }\n/**\n * @return {?}\n */\ndisconnect() {}\n/**\n * @param {?} result\n * @return {?}\n */\nprivate readGithubResult(result: Response): GithubIssue[] {\n    return result.json().items.map(issue => {\n      return {\n        number: issue.number,\n        created: new Date(issue.created_at),\n        state: issue.state,\n        title: issue.title,\n      };\n    });\n  }\n}\n\nfunction ExampleDataSource_tsickle_Closure_declarations() {\n/** @type {?} */\nExampleDataSource.prototype.resultsLength;\n/** @type {?} */\nExampleDataSource.prototype.isLoadingResults;\n/** @type {?} */\nExampleDataSource.prototype.isRateLimitReached;\n/** @type {?} */\nExampleDataSource.prototype._exampleDatabase;\n/** @type {?} */\nExampleDataSource.prototype._sort;\n/** @type {?} */\nExampleDataSource.prototype._paginator;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component, ElementRef, ViewChild} from '@angular/core';\nimport {DataSource} from '@angular/cdk';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {Observable} from 'rxjs/Observable';\nimport'rxjs/add/operator/startWith';\nimport'rxjs/add/observable/merge';\nimport'rxjs/add/operator/map';\nimport'rxjs/add/operator/debounceTime';\nimport'rxjs/add/operator/distinctUntilChanged';\nimport'rxjs/add/observable/fromEvent';\n/**\n * \\@title Table with filtering\n */\nexport class TableFilteringExample {\n  displayedColumns = ['userId', 'userName', 'progress', 'color'];\n  exampleDatabase = new ExampleDatabase();\n  dataSource: ExampleDataSource | null;\n\n   filter: ElementRef;\n/**\n * @return {?}\n */\nngOnInit() {\n    this.dataSource = new ExampleDataSource(this.exampleDatabase);\n    Observable.fromEvent(this.filter.nativeElement, 'keyup')\n        .debounceTime(150)\n        .distinctUntilChanged()\n        .subscribe(() => {\n          if (!this.dataSource) { return; }\n          this.dataSource.filter = this.filter.nativeElement.value;\n        });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'table-filtering-example',\n  styleUrls: ['table-filtering-example.css'],\n  templateUrl: 'table-filtering-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'filter': [{ type: ViewChild, args: ['filter', ] },],\n};\n}\n\nfunction TableFilteringExample_tsickle_Closure_declarations() {\n/** @type {?} */\nTableFilteringExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTableFilteringExample.ctorParameters;\n/** @type {?} */\nTableFilteringExample.propDecorators;\n/** @type {?} */\nTableFilteringExample.prototype.displayedColumns;\n/** @type {?} */\nTableFilteringExample.prototype.exampleDatabase;\n/** @type {?} */\nTableFilteringExample.prototype.dataSource;\n/** @type {?} */\nTableFilteringExample.prototype.filter;\n}\n\n/**\n * Constants used to fill up our data base.\n */\nconst COLORS = ['maroon', 'red', 'orange', 'yellow', 'olive', 'green', 'purple',\n  'fuchsia', 'lime', 'teal', 'aqua', 'blue', 'navy', 'black', 'gray'];\nconst /** @type {?} */ NAMES = ['Maia', 'Asher', 'Olivia', 'Atticus', 'Amelia', 'Jack',\n  'Charlotte', 'Theodore', 'Isla', 'Oliver', 'Isabella', 'Jasper',\n  'Cora', 'Levi', 'Violet', 'Arthur', 'Mia', 'Thomas', 'Elizabeth'];\n\nexport interface UserData {\n  id: string;\n  name: string;\n  progress: string;\n  color: string;\n}\n/**\n * An example database that the data source uses to retrieve data for the table.\n */\nexport class ExampleDatabase {\n/**\n * Stream that emits whenever the data has been modified.\n */\ndataChange: BehaviorSubject<UserData[]> = new BehaviorSubject<UserData[]>([]);\n/**\n * @return {?}\n */\nget data(): UserData[] { return this.dataChange.value; }\nconstructor() {\n    // Fill up the database with 100 users.\n    for (let i = 0; i < 100; i++) { this.addUser(); }\n  }\n/**\n * Adds a new user to the database.\n * @return {?}\n */\naddUser() {\n    const /** @type {?} */ copiedData = this.data.slice();\n    copiedData.push(this.createNewUser());\n    this.dataChange.next(copiedData);\n  }\n/**\n * Builds and returns a new User.\n * @return {?}\n */\nprivate createNewUser() {\n    const /** @type {?} */ name =\n        NAMES[Math.round(Math.random() * (NAMES.length - 1))] + ' ' +\n        NAMES[Math.round(Math.random() * (NAMES.length - 1))].charAt(0) + '.';\n\n    return {\n      id: (this.data.length + 1).toString(),\n      name: name,\n      progress: Math.round(Math.random() * 100).toString(),\n      color: COLORS[Math.round(Math.random() * (COLORS.length - 1))]\n    };\n  }\n}\n\nfunction ExampleDatabase_tsickle_Closure_declarations() {\n/**\n * Stream that emits whenever the data has been modified.\n * @type {?}\n */\nExampleDatabase.prototype.dataChange;\n}\n\n/**\n * Data source to provide what data should be rendered in the table. Note that the data source\n * can retrieve its data in any way. In this case, the data source is provided a reference\n * to a common data base, ExampleDatabase. It is not the data source's responsibility to manage\n * the underlying data. Instead, it only needs to take the data and send the table exactly what\n * should be rendered.\n */\nexport class ExampleDataSource extends DataSource<any> {\n  _filterChange = new BehaviorSubject('');\n/**\n * @return {?}\n */\nget filter(): string { return this._filterChange.value; }\n/**\n * @param {?} filter\n * @return {?}\n */\nset filter(filter: string) { this._filterChange.next(filter); }\n/**\n * @param {?} _exampleDatabase\n */\nconstructor(private _exampleDatabase: ExampleDatabase) {\n    super();\n  }\n/**\n * Connect function called by the table to retrieve one stream containing the data to render.\n * @return {?}\n */\nconnect(): Observable<UserData[]> {\n    const /** @type {?} */ displayDataChanges = [\n      this._exampleDatabase.dataChange,\n      this._filterChange,\n    ];\n\n    return Observable.merge(...displayDataChanges).map(() => {\n      return this._exampleDatabase.data.slice().filter((item: UserData) => {\n        let /** @type {?} */ searchStr = (item.name + item.color).toLowerCase();\n        return searchStr.indexOf(this.filter.toLowerCase()) != -1;\n      });\n    });\n  }\n/**\n * @return {?}\n */\ndisconnect() {}\n}\n\nfunction ExampleDataSource_tsickle_Closure_declarations() {\n/** @type {?} */\nExampleDataSource.prototype._filterChange;\n/** @type {?} */\nExampleDataSource.prototype._exampleDatabase;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}","import {NgModule} from '@angular/core';\n\nimport {CdkTableModule} from '@angular/cdk';\nimport {\n  MdAutocompleteModule, MdButtonModule, MdButtonToggleModule, MdPaginatorModule,\n  MdCardModule, MdCheckboxModule, MdChipsModule, MdDatepickerModule,\n  MdDialogModule, MdGridListModule, MdIconModule, MdInputModule,\n  MdListModule, MdMenuModule, MdProgressBarModule, MdProgressSpinnerModule,\n  MdRadioModule, MdSelectModule, MdSidenavModule, MdSliderModule, MdSortModule,\n  MdSlideToggleModule, MdSnackBarModule, MdTableModule, MdTabsModule, MdToolbarModule,\n  MdTooltipModule\n} from '@angular/material';\nexport class ExampleMaterialModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  exports: [\n    CdkTableModule,\n    MdAutocompleteModule,\n    MdButtonModule,\n    MdButtonToggleModule,\n    MdCardModule,\n    MdCheckboxModule,\n    MdChipsModule,\n    MdDatepickerModule,\n    MdDialogModule,\n    MdGridListModule,\n    MdIconModule,\n    MdInputModule,\n    MdListModule,\n    MdMenuModule,\n    MdProgressBarModule,\n    MdProgressSpinnerModule,\n    MdRadioModule,\n    MdSelectModule,\n    MdSlideToggleModule,\n    MdSliderModule,\n    MdSidenavModule,\n    MdSnackBarModule,\n    MdTabsModule,\n    MdToolbarModule,\n    MdTooltipModule,\n    MdPaginatorModule,\n    MdSortModule,\n    MdTableModule\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ExampleMaterialModule_tsickle_Closure_declarations() {\n/** @type {?} */\nExampleMaterialModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nExampleMaterialModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\nimport {FormControl} from '@angular/forms';\n\nimport'rxjs/add/operator/startWith';\nimport'rxjs/add/operator/map';\n/**\n * \\@title Basic autocomplete\n */\nexport class AutocompleteOverviewExample {\n  stateCtrl: FormControl;\n  filteredStates: any;\n\n  states = [\n    'Alabama',\n    'Alaska',\n    'Arizona',\n    'Arkansas',\n    'California',\n    'Colorado',\n    'Connecticut',\n    'Delaware',\n    'Florida',\n    'Georgia',\n    'Hawaii',\n    'Idaho',\n    'Illinois',\n    'Indiana',\n    'Iowa',\n    'Kansas',\n    'Kentucky',\n    'Louisiana',\n    'Maine',\n    'Maryland',\n    'Massachusetts',\n    'Michigan',\n    'Minnesota',\n    'Mississippi',\n    'Missouri',\n    'Montana',\n    'Nebraska',\n    'Nevada',\n    'New Hampshire',\n    'New Jersey',\n    'New Mexico',\n    'New York',\n    'North Carolina',\n    'North Dakota',\n    'Ohio',\n    'Oklahoma',\n    'Oregon',\n    'Pennsylvania',\n    'Rhode Island',\n    'South Carolina',\n    'South Dakota',\n    'Tennessee',\n    'Texas',\n    'Utah',\n    'Vermont',\n    'Virginia',\n    'Washington',\n    'West Virginia',\n    'Wisconsin',\n    'Wyoming',\n  ];\nconstructor() {\n    this.stateCtrl = new FormControl();\n    this.filteredStates = this.stateCtrl.valueChanges\n        .startWith(null)\n        .map(name => this.filterStates(name));\n  }\n/**\n * @param {?} val\n * @return {?}\n */\nfilterStates(val: string) {\n    return val ? this.states.filter(s => s.toLowerCase().indexOf(val.toLowerCase()) === 0)\n               : this.states;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'autocomplete-overview-example',\n  templateUrl: 'autocomplete-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AutocompleteOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nAutocompleteOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAutocompleteOverviewExample.ctorParameters;\n/** @type {?} */\nAutocompleteOverviewExample.prototype.stateCtrl;\n/** @type {?} */\nAutocompleteOverviewExample.prototype.filteredStates;\n/** @type {?} */\nAutocompleteOverviewExample.prototype.states;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic buttons\n */\nexport class ButtonOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'button-overview-example',\n  templateUrl: 'button-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ButtonOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nButtonOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nButtonOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Exclusive selection\n */\nexport class ButtonToggleExclusiveExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'button-toggle-exclusive-example',\n  templateUrl: 'button-toggle-exclusive-example.html',\n  styleUrls: ['button-toggle-exclusive-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ButtonToggleExclusiveExample_tsickle_Closure_declarations() {\n/** @type {?} */\nButtonToggleExclusiveExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nButtonToggleExclusiveExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic button-toggles\n */\nexport class ButtonToggleOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'button-toggle-overview-example',\n  templateUrl: 'button-toggle-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ButtonToggleOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nButtonToggleOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nButtonToggleOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Button varieties\n */\nexport class ButtonTypesExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'button-types-example',\n  templateUrl: 'button-types-example.html',\n  styleUrls: ['button-types-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ButtonTypesExample_tsickle_Closure_declarations() {\n/** @type {?} */\nButtonTypesExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nButtonTypesExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Card with multiple sections\n */\nexport class CardFancyExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'card-fancy-example',\n  templateUrl: 'card-fancy-example.html',\n  styleUrls: ['card-fancy-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CardFancyExample_tsickle_Closure_declarations() {\n/** @type {?} */\nCardFancyExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCardFancyExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic cards\n */\nexport class CardOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'card-overview-example',\n  templateUrl: 'card-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CardOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nCardOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCardOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\nimport {DataSource} from '@angular/cdk';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {Observable} from 'rxjs/Observable';\nimport'rxjs/add/operator/startWith';\nimport'rxjs/add/observable/merge';\nimport'rxjs/add/operator/map';\n/**\n * \\@title Basic CDK data-table\n */\nexport class CdkTableBasicExample {\n  displayedColumns = ['userId', 'userName', 'progress', 'color'];\n  exampleDatabase = new ExampleDatabase();\n  dataSource: ExampleDataSource | null;\n/**\n * @return {?}\n */\nngOnInit() {\n    this.dataSource = new ExampleDataSource(this.exampleDatabase);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'cdk-table-basic-example',\n  styleUrls: ['cdk-table-basic-example.css'],\n  templateUrl: 'cdk-table-basic-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CdkTableBasicExample_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkTableBasicExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkTableBasicExample.ctorParameters;\n/** @type {?} */\nCdkTableBasicExample.prototype.displayedColumns;\n/** @type {?} */\nCdkTableBasicExample.prototype.exampleDatabase;\n/** @type {?} */\nCdkTableBasicExample.prototype.dataSource;\n}\n\n/**\n * Constants used to fill up our data base.\n */\nconst COLORS = ['maroon', 'red', 'orange', 'yellow', 'olive', 'green', 'purple',\n  'fuchsia', 'lime', 'teal', 'aqua', 'blue', 'navy', 'black', 'gray'];\nconst /** @type {?} */ NAMES = ['Maia', 'Asher', 'Olivia', 'Atticus', 'Amelia', 'Jack',\n  'Charlotte', 'Theodore', 'Isla', 'Oliver', 'Isabella', 'Jasper',\n  'Cora', 'Levi', 'Violet', 'Arthur', 'Mia', 'Thomas', 'Elizabeth'];\n\nexport interface UserData {\n  id: string;\n  name: string;\n  progress: string;\n  color: string;\n}\n/**\n * An example database that the data source uses to retrieve data for the table.\n */\nexport class ExampleDatabase {\n/**\n * Stream that emits whenever the data has been modified.\n */\ndataChange: BehaviorSubject<UserData[]> = new BehaviorSubject<UserData[]>([]);\n/**\n * @return {?}\n */\nget data(): UserData[] { return this.dataChange.value; }\nconstructor() {\n    // Fill up the database with 100 users.\n    for (let i = 0; i < 100; i++) { this.addUser(); }\n  }\n/**\n * Adds a new user to the database.\n * @return {?}\n */\naddUser() {\n    const /** @type {?} */ copiedData = this.data.slice();\n    copiedData.push(this.createNewUser());\n    this.dataChange.next(copiedData);\n  }\n/**\n * Builds and returns a new User.\n * @return {?}\n */\nprivate createNewUser() {\n    const /** @type {?} */ name =\n        NAMES[Math.round(Math.random() * (NAMES.length - 1))] + ' ' +\n        NAMES[Math.round(Math.random() * (NAMES.length - 1))].charAt(0) + '.';\n\n    return {\n      id: (this.data.length + 1).toString(),\n      name: name,\n      progress: Math.round(Math.random() * 100).toString(),\n      color: COLORS[Math.round(Math.random() * (COLORS.length - 1))]\n    };\n  }\n}\n\nfunction ExampleDatabase_tsickle_Closure_declarations() {\n/**\n * Stream that emits whenever the data has been modified.\n * @type {?}\n */\nExampleDatabase.prototype.dataChange;\n}\n\n/**\n * Data source to provide what data should be rendered in the table. Note that the data source\n * can retrieve its data in any way. In this case, the data source is provided a reference\n * to a common data base, ExampleDatabase. It is not the data source's responsibility to manage\n * the underlying data. Instead, it only needs to take the data and send the table exactly what\n * should be rendered.\n */\nexport class ExampleDataSource extends DataSource<any> {\n/**\n * @param {?} _exampleDatabase\n */\nconstructor(private _exampleDatabase: ExampleDatabase) {\n    super();\n  }\n/**\n * Connect function called by the table to retrieve one stream containing the data to render.\n * @return {?}\n */\nconnect(): Observable<UserData[]> {\n    return this._exampleDatabase.dataChange;\n  }\n/**\n * @return {?}\n */\ndisconnect() {}\n}\n\nfunction ExampleDataSource_tsickle_Closure_declarations() {\n/** @type {?} */\nExampleDataSource.prototype._exampleDatabase;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Configurable checkbox\n */\nexport class CheckboxConfigurableExample {\n  checked = false;\n  indeterminate = false;\n  align = 'start';\n  disabled = false;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'checkbox-configurable-example',\n  templateUrl: 'checkbox-configurable-example.html',\n  styleUrls: ['checkbox-configurable-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CheckboxConfigurableExample_tsickle_Closure_declarations() {\n/** @type {?} */\nCheckboxConfigurableExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCheckboxConfigurableExample.ctorParameters;\n/** @type {?} */\nCheckboxConfigurableExample.prototype.checked;\n/** @type {?} */\nCheckboxConfigurableExample.prototype.indeterminate;\n/** @type {?} */\nCheckboxConfigurableExample.prototype.align;\n/** @type {?} */\nCheckboxConfigurableExample.prototype.disabled;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic checkboxes\n */\nexport class CheckboxOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'checkbox-overview-example',\n  templateUrl: 'checkbox-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CheckboxOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nCheckboxOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCheckboxOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic chips\n */\nexport class ChipsOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'chips-overview-example',\n  templateUrl: 'chips-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ChipsOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nChipsOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nChipsOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Stacked chips\n */\nexport class ChipsStackedExample {\n  color: string;\n\n  availableColors = [\n    { name: 'none', color: '' },\n    { name: 'Primary', color: 'primary' },\n    { name: 'Accent', color: 'accent' },\n    { name: 'Warn', color: 'warn' }\n  ];\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'chips-stacked-example',\n  templateUrl: 'chips-stacked-example.html',\n  styleUrls: ['chips-stacked-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ChipsStackedExample_tsickle_Closure_declarations() {\n/** @type {?} */\nChipsStackedExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nChipsStackedExample.ctorParameters;\n/** @type {?} */\nChipsStackedExample.prototype.color;\n/** @type {?} */\nChipsStackedExample.prototype.availableColors;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Datepicker API\n */\nexport class DatepickerApiExample {\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'datepicker-api-example',\n  templateUrl: 'datepicker-api-example.html',\n  styleUrls: ['datepicker-api-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction DatepickerApiExample_tsickle_Closure_declarations() {\n/** @type {?} */\nDatepickerApiExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDatepickerApiExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Datepicker Filter\n */\nexport class DatepickerFilterExample {\n  myFilter = (d: Date): boolean => {\n    const /** @type {?} */ day = d.getDay();\n    // Prevent Saturday and Sunday from being selected.\n    return day !== 0 && day !== 6;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'datepicker-filter-example',\n  templateUrl: 'datepicker-filter-example.html',\n  styleUrls: ['datepicker-filter-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction DatepickerFilterExample_tsickle_Closure_declarations() {\n/** @type {?} */\nDatepickerFilterExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDatepickerFilterExample.ctorParameters;\n/** @type {?} */\nDatepickerFilterExample.prototype.myFilter;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Datepicker Min Max\n */\nexport class DatepickerMinMaxExample {\n  minDate = new Date(2000, 0, 1);\n  maxDate = new Date(2020, 0, 1);\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'datepicker-min-max-example',\n  templateUrl: 'datepicker-min-max-example.html',\n  styleUrls: ['datepicker-min-max-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction DatepickerMinMaxExample_tsickle_Closure_declarations() {\n/** @type {?} */\nDatepickerMinMaxExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDatepickerMinMaxExample.ctorParameters;\n/** @type {?} */\nDatepickerMinMaxExample.prototype.minDate;\n/** @type {?} */\nDatepickerMinMaxExample.prototype.maxDate;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic datepicker\n */\nexport class DatepickerOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'datepicker-overview-example',\n  templateUrl: 'datepicker-overview-example.html',\n  styleUrls: ['datepicker-overview-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction DatepickerOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nDatepickerOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDatepickerOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Datepicker start date\n */\nexport class DatepickerStartViewExample {\n  startDate = new Date(1990, 0, 1);\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'datepicker-start-view-example',\n  templateUrl: 'datepicker-start-view-example.html',\n  styleUrls: ['datepicker-start-view-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction DatepickerStartViewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nDatepickerStartViewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDatepickerStartViewExample.ctorParameters;\n/** @type {?} */\nDatepickerStartViewExample.prototype.startDate;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Datepicker Touch\n */\nexport class DatepickerTouchExample {\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'datepicker-touch-example',\n  templateUrl: 'datepicker-touch-example.html',\n  styleUrls: ['datepicker-touch-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction DatepickerTouchExample_tsickle_Closure_declarations() {\n/** @type {?} */\nDatepickerTouchExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDatepickerTouchExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\nimport {MdDialog} from '@angular/material';\n/**\n * \\@title Dialog with header, scrollable content and actions\n */\nexport class DialogContentExample {\n/**\n * @param {?} dialog\n */\nconstructor(public dialog: MdDialog) {}\n/**\n * @return {?}\n */\nopenDialog() {\n    const /** @type {?} */ dialogRef = this.dialog.open(DialogContentExampleDialog, {\n      height: '350px'\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      console.log(`Dialog result: ${result}`);\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'dialog-content-example',\n  templateUrl: 'dialog-content-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDialog, },\n];\n}\n\nfunction DialogContentExample_tsickle_Closure_declarations() {\n/** @type {?} */\nDialogContentExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDialogContentExample.ctorParameters;\n/** @type {?} */\nDialogContentExample.prototype.dialog;\n}\n\nexport class DialogContentExampleDialog {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'dialog-content-example-dialog',\n  templateUrl: 'dialog-content-example-dialog.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction DialogContentExampleDialog_tsickle_Closure_declarations() {\n/** @type {?} */\nDialogContentExampleDialog.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDialogContentExampleDialog.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component, Inject} from '@angular/core';\nimport {MdDialog, MD_DIALOG_DATA} from '@angular/material';\n/**\n * \\@title Injecting data when opening a dialog\n */\nexport class DialogDataExample {\n/**\n * @param {?} dialog\n */\nconstructor(public dialog: MdDialog) {}\n/**\n * @return {?}\n */\nopenDialog() {\n    this.dialog.open(DialogDataExampleDialog, {\n      data: {\n        animal: 'panda'\n      }\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'dialog-data-example',\n  templateUrl: 'dialog-data-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDialog, },\n];\n}\n\nfunction DialogDataExample_tsickle_Closure_declarations() {\n/** @type {?} */\nDialogDataExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDialogDataExample.ctorParameters;\n/** @type {?} */\nDialogDataExample.prototype.dialog;\n}\n\nexport class DialogDataExampleDialog {\n/**\n * @param {?} data\n */\nconstructor(\npublic data: any) {}\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'dialog-data-example-dialog',\n  templateUrl: 'dialog-data-example-dialog.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [MD_DIALOG_DATA, ] }, ]},\n];\n}\n\nfunction DialogDataExampleDialog_tsickle_Closure_declarations() {\n/** @type {?} */\nDialogDataExampleDialog.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDialogDataExampleDialog.ctorParameters;\n/** @type {?} */\nDialogDataExampleDialog.prototype.data;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\nimport {MdDialog} from '@angular/material';\n/**\n * \\@title Dialog elements\n */\nexport class DialogElementsExample {\n/**\n * @param {?} dialog\n */\nconstructor(public dialog: MdDialog) { }\n/**\n * @return {?}\n */\nopenDialog() {\n    this.dialog.open(DialogElementsExampleDialog);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'dialog-elements-example',\n  templateUrl: 'dialog-elements-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDialog, },\n];\n}\n\nfunction DialogElementsExample_tsickle_Closure_declarations() {\n/** @type {?} */\nDialogElementsExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDialogElementsExample.ctorParameters;\n/** @type {?} */\nDialogElementsExample.prototype.dialog;\n}\n\nexport class DialogElementsExampleDialog { static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'dialog-elements-example-dialog',\n  templateUrl: 'dialog-elements-example-dialog.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction DialogElementsExampleDialog_tsickle_Closure_declarations() {\n/** @type {?} */\nDialogElementsExampleDialog.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDialogElementsExampleDialog.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component, Inject} from '@angular/core';\nimport {MdDialog, MdDialogRef, MD_DIALOG_DATA} from '@angular/material';\n/**\n * \\@title Dialog Overview\n */\nexport class DialogOverviewExample {\n\n  animal: string;\n  name: string;\n/**\n * @param {?} dialog\n */\nconstructor(public dialog: MdDialog) {}\n/**\n * @return {?}\n */\nopenDialog(): void {\n    let /** @type {?} */ dialogRef = this.dialog.open(DialogOverviewExampleDialog, {\n      width: '250px',\n      data: { name: this.name, animal: this.animal }\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      console.log('The dialog was closed');\n      this.animal = result;\n    });\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'dialog-overview-example',\n  templateUrl: 'dialog-overview-example.html'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDialog, },\n];\n}\n\nfunction DialogOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nDialogOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDialogOverviewExample.ctorParameters;\n/** @type {?} */\nDialogOverviewExample.prototype.animal;\n/** @type {?} */\nDialogOverviewExample.prototype.name;\n/** @type {?} */\nDialogOverviewExample.prototype.dialog;\n}\n\nexport class DialogOverviewExampleDialog {\n/**\n * @param {?} dialogRef\n * @param {?} data\n */\nconstructor(\npublic dialogRef: MdDialogRef<DialogOverviewExampleDialog>,\npublic data: any) { }\n/**\n * @return {?}\n */\nonNoClick(): void {\n    this.dialogRef.close();\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'dialog-overview-example-dialog',\n  templateUrl: 'dialog-overview-example-dialog.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDialogRef, },\n{type: undefined, decorators: [{ type: Inject, args: [MD_DIALOG_DATA, ] }, ]},\n];\n}\n\nfunction DialogOverviewExampleDialog_tsickle_Closure_declarations() {\n/** @type {?} */\nDialogOverviewExampleDialog.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDialogOverviewExampleDialog.ctorParameters;\n/** @type {?} */\nDialogOverviewExampleDialog.prototype.dialogRef;\n/** @type {?} */\nDialogOverviewExampleDialog.prototype.data;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Dynamic grid-list\n */\nexport class GridListDynamicExample {\n  tiles = [\n    {text: 'One', cols: 3, rows: 1, color: 'lightblue'},\n    {text: 'Two', cols: 1, rows: 2, color: 'lightgreen'},\n    {text: 'Three', cols: 1, rows: 1, color: 'lightpink'},\n    {text: 'Four', cols: 2, rows: 1, color: '#DDBDF1'},\n  ];\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'grid-list-dynamic-example',\n  templateUrl: 'grid-list-dynamic-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction GridListDynamicExample_tsickle_Closure_declarations() {\n/** @type {?} */\nGridListDynamicExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nGridListDynamicExample.ctorParameters;\n/** @type {?} */\nGridListDynamicExample.prototype.tiles;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic grid-list\n */\nexport class GridListOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'grid-list-overview-example',\n  styleUrls: ['grid-list-overview-example.css'],\n  templateUrl: 'grid-list-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction GridListOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nGridListOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nGridListOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic icons\n */\nexport class IconOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'icon-overview-example',\n  templateUrl: 'icon-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction IconOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nIconOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nIconOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\nimport {DomSanitizer} from '@angular/platform-browser';\nimport {MdIconRegistry} from '@angular/material';\n/**\n * \\@title SVG icons\n */\nexport class IconSvgExample {\n/**\n * @param {?} iconRegistry\n * @param {?} sanitizer\n */\nconstructor(iconRegistry: MdIconRegistry, sanitizer: DomSanitizer) {\n    iconRegistry.addSvgIcon(\n        'thumbs-up',\n        sanitizer.bypassSecurityTrustResourceUrl('assets/img/examples/thumbup-icon.svg'));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'icon-svg-example',\n  templateUrl: 'icon-svg-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdIconRegistry, },\n{type: DomSanitizer, },\n];\n}\n\nfunction IconSvgExample_tsickle_Closure_declarations() {\n/** @type {?} */\nIconSvgExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nIconSvgExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Input Clearable\n */\nexport class InputClearableExample {\n  value = 'Clear me';\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'input-clearable-example',\n  templateUrl: './input-clearable-example.html',\n  styleUrls: ['./input-clearable-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction InputClearableExample_tsickle_Closure_declarations() {\n/** @type {?} */\nInputClearableExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nInputClearableExample.ctorParameters;\n/** @type {?} */\nInputClearableExample.prototype.value;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\nimport {FormControl, Validators} from '@angular/forms';\n\nconst /** @type {?} */ EMAIL_REGEX = /^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n/**\n * \\@title Input Errors\n */\nexport class InputErrorsExample {\n\n  emailFormControl = new FormControl('', [\n    Validators.required,\n    Validators.pattern(EMAIL_REGEX)]);\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'input-errors-example',\n  templateUrl: 'input-errors-example.html',\n  styleUrls: ['input-errors-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction InputErrorsExample_tsickle_Closure_declarations() {\n/** @type {?} */\nInputErrorsExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nInputErrorsExample.ctorParameters;\n/** @type {?} */\nInputErrorsExample.prototype.emailFormControl;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Inputs in a form\n */\nexport class InputFormExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'input-form-example',\n  templateUrl: 'input-form-example.html',\n  styleUrls: ['input-form-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction InputFormExample_tsickle_Closure_declarations() {\n/** @type {?} */\nInputFormExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nInputFormExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Input hints\n */\nexport class InputHintExample { static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'input-hint-example',\n  templateUrl: 'input-hint-example.html',\n  styleUrls: ['input-hint-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction InputHintExample_tsickle_Closure_declarations() {\n/** @type {?} */\nInputHintExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nInputHintExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic Inputs\n */\nexport class InputOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'input-overview-example',\n  templateUrl: 'input-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction InputOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nInputOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nInputOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Input Prefixes and Suffixes\n */\nexport class InputPrefixSuffixExample { static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'input-prefix-suffix-example',\n  templateUrl: 'input-prefix-suffix-example.html',\n  styleUrls: ['input-prefix-suffix-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction InputPrefixSuffixExample_tsickle_Closure_declarations() {\n/** @type {?} */\nInputPrefixSuffixExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nInputPrefixSuffixExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic list\n */\nexport class ListOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'list-overview-example',\n  templateUrl: 'list-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ListOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nListOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nListOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title List with sections\n */\nexport class ListSectionsExample {\n  folders = [\n    {\n      name: 'Photos',\n      updated: new Date('1/1/16'),\n    },\n    {\n      name: 'Recipes',\n      updated: new Date('1/17/16'),\n    },\n    {\n      name: 'Work',\n      updated: new Date('1/28/16'),\n    }\n  ];\n  notes = [\n    {\n      name: 'Vacation Itinerary',\n      updated: new Date('2/20/16'),\n    },\n    {\n      name: 'Kitchen Remodel',\n      updated: new Date('1/18/16'),\n    }\n  ];\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'list-sections-example',\n  styleUrls: ['list-sections-example.css'],\n  templateUrl: 'list-sections-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ListSectionsExample_tsickle_Closure_declarations() {\n/** @type {?} */\nListSectionsExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nListSectionsExample.ctorParameters;\n/** @type {?} */\nListSectionsExample.prototype.folders;\n/** @type {?} */\nListSectionsExample.prototype.notes;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Menu with icons\n */\nexport class MenuIconsExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'menu-icons-example',\n  templateUrl: 'menu-icons-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MenuIconsExample_tsickle_Closure_declarations() {\n/** @type {?} */\nMenuIconsExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMenuIconsExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic menu\n */\nexport class MenuOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'menu-overview-example',\n  templateUrl: 'menu-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MenuOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nMenuOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMenuOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\nimport {PageEvent} from '@angular/material';\n/**\n * \\@title Configurable paginator\n */\nexport class PaginatorConfigurableExample {\n  // MdPaginator Inputs\n  length = 100;\n  pageSize = 10;\n  pageSizeOptions = [5, 10, 25, 100];\n\n  // MdPaginator Output\n  pageEvent: PageEvent;\n/**\n * @param {?} setPageSizeOptionsInput\n * @return {?}\n */\nsetPageSizeOptions(setPageSizeOptionsInput: string) {\n    this.pageSizeOptions = setPageSizeOptionsInput.split(',').map(str => +str);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'paginator-configurable-example',\n  templateUrl: 'paginator-configurable-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction PaginatorConfigurableExample_tsickle_Closure_declarations() {\n/** @type {?} */\nPaginatorConfigurableExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPaginatorConfigurableExample.ctorParameters;\n/** @type {?} */\nPaginatorConfigurableExample.prototype.length;\n/** @type {?} */\nPaginatorConfigurableExample.prototype.pageSize;\n/** @type {?} */\nPaginatorConfigurableExample.prototype.pageSizeOptions;\n/** @type {?} */\nPaginatorConfigurableExample.prototype.pageEvent;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Paginator\n */\nexport class PaginatorOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'paginator-overview-example',\n  templateUrl: 'paginator-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction PaginatorOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nPaginatorOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPaginatorOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Configurable progress-bar\n */\nexport class ProgressBarConfigurableExample {\n  color = 'primary';\n  mode = 'determinate';\n  value = 50;\n  bufferValue = 75;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'progress-bar-configurable-example',\n  templateUrl: 'progress-bar-configurable-example.html',\n  styleUrls: ['progress-bar-configurable-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ProgressBarConfigurableExample_tsickle_Closure_declarations() {\n/** @type {?} */\nProgressBarConfigurableExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nProgressBarConfigurableExample.ctorParameters;\n/** @type {?} */\nProgressBarConfigurableExample.prototype.color;\n/** @type {?} */\nProgressBarConfigurableExample.prototype.mode;\n/** @type {?} */\nProgressBarConfigurableExample.prototype.value;\n/** @type {?} */\nProgressBarConfigurableExample.prototype.bufferValue;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic progress-bar\n */\nexport class ProgressBarOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'progress-bar-overview-example',\n  templateUrl: 'progress-bar-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ProgressBarOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nProgressBarOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nProgressBarOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Configurable progress spinner\n */\nexport class ProgressSpinnerConfigurableExample {\n  color = 'primary';\n  mode = 'determinate';\n  value = 50;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'progress-spinner-configurable-example',\n  templateUrl: 'progress-spinner-configurable-example.html',\n  styleUrls: ['progress-spinner-configurable-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ProgressSpinnerConfigurableExample_tsickle_Closure_declarations() {\n/** @type {?} */\nProgressSpinnerConfigurableExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nProgressSpinnerConfigurableExample.ctorParameters;\n/** @type {?} */\nProgressSpinnerConfigurableExample.prototype.color;\n/** @type {?} */\nProgressSpinnerConfigurableExample.prototype.mode;\n/** @type {?} */\nProgressSpinnerConfigurableExample.prototype.value;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic progress-spinner\n */\nexport class ProgressSpinnerOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'progress-spinner-overview-example',\n  templateUrl: 'progress-spinner-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ProgressSpinnerOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nProgressSpinnerOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nProgressSpinnerOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["TableOverviewExample","ctorParameters","filter","type","ViewChild","args","NAMES$3","ExampleDatabase$3","this","dataChange","BehaviorSubject","i","addUser","Object","defineProperty","prototype","get","value","enumerable","configurable","copiedData","data","slice","push","createNewUser","next","name","Math","round","random","length","charAt","id","toString","progress","color","COLORS$3","_this","_paginator","_sort","ExampleDataSource$4","_exampleDatabase","mdSortChange","NAMES","page","Observable","merge","apply","displayDataChanges","map","filteredData","COLORS","item","toLowerCase","indexOf","sort","a","b","propertyA","propertyB","active","_a","_b","_d","isNaN","_c","DataSource","TablePaginationExample","displayedColumns","ngOnInit","dataSource","ExampleDataSource$5","exampleDatabase","paginator","Component","selector","styles","template","propDecorators","MdPaginator","COLORS$4","ExampleDatabase$4","_super","call","tslib_1.__extends","startIndex","pageIndex","pageSize","splice","disconnect","TableSortingExample","ExampleDatabase$5","decorators","COLORS$5","NAMES$5","ExampleDataSource$6","getSortedData","direction","TabsOverviewExample","TabsTemplateLabelExample","ToolbarMultirowExample","ToolbarOverviewExample","TooltipOverviewExample","TooltipPositionExample","position","EXAMPLE_COMPONENTS","autocomplete-overview","title","component","AutocompleteOverviewExample","additionalFiles","selectorName","button-overview","ButtonOverviewExample","button-toggle-exclusive","ButtonToggleExclusiveExample","button-toggle-overview","ButtonToggleOverviewExample","button-types","ButtonTypesExample","card-fancy","CardFancyExample","card-overview","CardOverviewExample","cdk-table-basic","CdkTableBasicExample","checkbox-configurable","CheckboxConfigurableExample","checkbox-overview","CheckboxOverviewExample","chips-overview","ChipsOverviewExample","chips-stacked","ChipsStackedExample","datepicker-api","DatepickerApiExample","datepicker-filter","DatepickerFilterExample","datepicker-min-max","DatepickerMinMaxExample","datepicker-overview","DatepickerOverviewExample","datepicker-start-view","DatepickerStartViewExample","datepicker-touch","DatepickerTouchExample","dialog-content","DialogContentExample","dialog-data","DialogDataExample","dialog-elements","DialogElementsExample","dialog-overview","DialogOverviewExample","grid-list-dynamic","GridListDynamicExample","grid-list-overview","GridListOverviewExample","icon-overview","IconOverviewExample","icon-svg","IconSvgExample","input-clearable","InputClearableExample","input-errors","InputErrorsExample","input-form","InputFormExample","input-hint","InputHintExample","input-overview","InputOverviewExample","input-prefix-suffix","InputPrefixSuffixExample","list-overview","ListOverviewExample","list-sections","ListSectionsExample","menu-icons","MenuIconsExample","menu-overview","MenuOverviewExample","paginator-configurable","PaginatorConfigurableExample","paginator-overview","PaginatorOverviewExample","progress-bar-configurable","ProgressBarConfigurableExample","progress-bar-overview","ProgressBarOverviewExample","progress-spinner-configurable","ProgressSpinnerConfigurableExample","progress-spinner-overview","ProgressSpinnerOverviewExample","radio-ng-model","RadioNgModelExample","radio-overview","RadioOverviewExample","select-form","SelectFormExample","select-overview","SelectOverviewExample","sidenav-fab","SidenavFabExample","sidenav-overview","SidenavOverviewExample","slide-toggle-configurable","SlideToggleConfigurableExample","slide-toggle-forms","SlideToggleFormsExample","slide-toggle-overview","SlideToggleOverviewExample","slider-configurable","SliderConfigurableExample","slider-overview","SliderOverviewExample","snack-bar-component","SnackBarComponentExample","SnackBarOverviewExample","sort-overview","SortOverviewExample","table-basic","table-http","TableFilteringExample","table-overview","table-pagination","table-sorting","tabs-overview","tabs-template-label","toolbar-multirow","mode","seasons","foods","viewValue","encapsulation","ViewEncapsulation","None","checked","disabled","formBuilder","isChecked","formGroup","group","acceptTerms","Validators","requiredTrue","onFormSubmit","formValue","FormBuilder","invert","max","min","showTicks","step","_tickInterval","autoTicks","snackBar","MdSnackBar","PizzaPartyComponent","openSnackBar","message","action","open","desserts","calories","fat","carbs","protein","sortedData","compare","isAsc","TableBasicExample","ExampleDatabase$1","ExampleDataSource$1","NAMES$1","connect","TableHttpExample","ExampleHttpDao","http","ExampleDataSource$2","MdSort","getRepoIssues","order","resultsLength","catch","isRateLimitReached","of","isLoadingResults","result","json","total_count","readGithubResult","items","issue","number","created","Date","created_at","state","ExampleDatabase$2","subscribe","COLORS$2","NAMES$2","ExampleDataSource$3","_filterChange","set","fromEvent","nativeElement","debounceTime","selection","isEmpty","selected","renderedData","clear","forEach","select","__extends","d","__","constructor","extendStatics","create","setPrototypeOf","__proto__","Array","p","hasOwnProperty","ExampleMaterialModule","NgModule","exports","CdkTableModule","MdAutocompleteModule","MdButtonModule","MdButtonToggleModule","MdCardModule","MdCheckboxModule","MdChipsModule","MdDatepickerModule","MdDialogModule","MdGridListModule","MdIconModule","MdInputModule","MdListModule","MdMenuModule","MdProgressBarModule","MdProgressSpinnerModule","MdRadioModule","MdSelectModule","MdSlideToggleModule","MdSliderModule","MdSidenavModule","MdSnackBarModule","MdTabsModule","MdToolbarModule","MdTooltipModule","MdPaginatorModule","MdSortModule","MdTableModule","states","stateCtrl","FormControl","filteredStates","valueChanges","filterStates","val","ExampleDatabase","ExampleDataSource","indeterminate","align","availableColors","myFilter","day","getDay","dialog","DialogContentExampleDialog","afterClosed","MdDialog","DialogDataExampleDialog","animal","undefined","Inject","MD_DIALOG_DATA","openDialog","DialogElementsExampleDialog","DialogOverviewExampleDialog","width","dialogRef","onNoClick","MdDialogRef","tiles","text","cols","rows","iconRegistry","sanitizer","addSvgIcon","bypassSecurityTrustResourceUrl","DomSanitizer","EMAIL_REGEX","emailFormControl","updated","notes","pageSizeOptions","setPageSizeOptions","setPageSizeOptionsInput","split","str","bufferValue"],"mappings":"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"}